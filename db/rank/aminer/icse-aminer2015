ICSE-bp-1 | Architecture-based runtime software evolution | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-1 Architecture-based runtime software evolution | 
ICSE-bp-2 | An investigation into coupling measures for C++ | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-2 An investigation into coupling measures for C++ | 
ICSE-bp-3 | GRAIL/KAOS: an environment for goal-driven requirements engineering | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-3 GRAIL/KAOS: an environment for goal-driven requirements engineering | 
ICSE-bp-4 | Executable object modeling with statecharts | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-4 Executable object modeling with statecharts | 
ICSE-bp-5 | A Case Study in Applying a Systematic Method for COTS Selection | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-5 A Case Study in Applying a Systematic Method for COTS Selection | 
ICSE-bp-6 | A case study in applying a systematic method for COTS selection | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-6 A case study in applying a systematic method for COTS selection | 
ICSE-bp-7 | <italic>N</italic> degrees of separation: multi-dimensional separation of concerns | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-7 <italic>N</italic> degrees of separation: multi-dimensional separation of concerns | 
ICSE-bp-8 | Dynamically discovering likely program invariants to support program evolution | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-8 Dynamically discovering likely program invariants to support program evolution | 
ICSE-bp-9 | A replicated Assessment and Comparison of Common Software Cost Modeling Techniques | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-9 A replicated Assessment and Comparison of Common Software Cost Modeling Techniques | 
ICSE-bp-10 | Patterns in property specifications for finite-state verification | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-10 Patterns in property specifications for finite-state verification | 
ICSE-bp-11 | Lime: linda meets mobility | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-11 Lime: linda meets mobility | 
ICSE-bp-12 | Formalizing design patterns | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-12 Formalizing design patterns | 
ICSE-bp-13 | Concern graphs: finding and describing concerns using structural program dependencies | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-13 Concern graphs: finding and describing concerns using structural program dependencies | 
ICSE-bp-14 | Building systems from commercial components | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-14 Building systems from commercial components | 
ICSE-bp-15 | Intrusion-Tolerant Architectures: Concepts and Design | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-15 Intrusion-Tolerant Architectures: Concepts and Design | 
ICSE-bp-16 | Documenting software architectures: views and beyond | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-16 Documenting software architectures: views and beyond | 
ICSE-bp-17 | Modular verification of software components in C | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-17 Modular verification of software components in C | 
ICSE-bp-18 | Toward an Understanding of the Motivation of Open Source Software Developers. | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-18 Toward an Understanding of the Motivation of Open Source Software Developers. | 
ICSE-bp-19 | Precise dynamic slicing algorithms | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-19 Precise dynamic slicing algorithms | 
ICSE-bp-20 | Requirements engineering: a roadmap | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-20 Requirements engineering: a roadmap | 
ICSE-bp-21 | Principled design of the modern Web architecture | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-21 Principled design of the modern Web architecture | 
ICSE-bp-22 | Requirements engineering in the year 00: a research perspective | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-22 Requirements engineering in the year 00: a research perspective | 
ICSE-bp-23 | Designing concurrent, distributed, and real-time applications with UML | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-23 Designing concurrent, distributed, and real-time applications with UML | 
ICSE-bp-24 | ArchJava: Connecting Software Architecture to Implementation | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-24 ArchJava: Connecting Software Architecture to Implementation | 
ICSE-bp-25 | Concern graphs: finding and describing concerns using structural program dependenceis | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-25 Concern graphs: finding and describing concerns using structural program dependenceis | 
ICSE-bp-26 | Designing concurrent, distributed, and real-time applications with UML | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-26 Designing concurrent, distributed, and real-time applications with UML | 
ICSE-bp-27 | Performing systematic literature reviews in software engineering | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-27 Performing systematic literature reviews in software engineering | 
ICSE-bp-28 | Mining metrics to predict component failures | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-28 Mining metrics to predict component failures | 
ICSE-bp-29 | Who should fix this bug? | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-29 Who should fix this bug? | 
ICSE-bp-30 | Model-based development of dynamically adaptive software | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-30 Model-based development of dynamically adaptive software | 
ICSE-bp-31 | Model-driven Development of Complex Software: A Research Roadmap | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-31 Model-driven Development of Complex Software: A Research Roadmap | 
ICSE-bp-32 | Self-Managed Systems: an Architectural Challenge | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-32 Self-Managed Systems: an Architectural Challenge | 
ICSE-bp-33 | Software Reliability Engineering: A Roadmap | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-33 Software Reliability Engineering: A Roadmap | 
ICSE-bp-34 | Matching and Merging of Statecharts Specifications | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-34 Matching and Merging of Statecharts Specifications | 
ICSE-bp-35 | Predicting Faults from Cached History | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-35 Predicting Faults from Cached History | 
ICSE-bp-36 | Tracking code clones in evolving software | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-36 Tracking code clones in evolving software | 
ICSE-bp-37 | Refactoring for Parameterizing Java Classes | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-37 Refactoring for Parameterizing Java Classes | 
ICSE-bp-38 | Object-Oriented Reengineering Patterns | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-38 Object-Oriented Reengineering Patterns | 
ICSE-bp-39 | Theme: An Approach for Aspect-Oriented Analysis and Design | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-39 Theme: An Approach for Aspect-Oriented Analysis and Design | 
ICSE-bp-40 | Static Checking of Dynamically Generated Queries in Database Applications | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-40 Static Checking of Dynamically Generated Queries in Database Applications | 
ICSE-bp-41 | SNIAFL: Towards a Static Non-Interactive Approach to Feature Location | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-41 SNIAFL: Towards a Static Non-Interactive Approach to Feature Location | 
ICSE-bp-42 | An Empirical Study of Software Reuse vs. Defect-Density and Stability | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-42 An Empirical Study of Software Reuse vs. Defect-Density and Stability | 
ICSE-bp-43 | Extending the representational state transfer (rest) architectural style for decentralized systems | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-43 Extending the representational state transfer (rest) architectural style for decentralized systems | 
ICSE-bp-44 | A Tool for Writing and Debugging Algebraic Specifications | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-44 A Tool for Writing and Debugging Algebraic Specifications | 
ICSE-bp-45 | Is mutation an appropriate tool for testing experiments? | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-45 Is mutation an appropriate tool for testing experiments? | 
ICSE-bp-46 | Research challenges of autonomic computing | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-46 Research challenges of autonomic computing | 
ICSE-bp-47 | Using structural context to recommend source code examples | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-47 Using structural context to recommend source code examples | 
ICSE-bp-48 | Eliciting design requirements for maintenance-oriented IDEs: a detailed study of corrective and perfective maintenance tasks | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-48 Eliciting design requirements for maintenance-oriented IDEs: a detailed study of corrective and perfective maintenance tasks | 
ICSE-bp-49 | Data structure repair using goal-directed reasoning | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-49 Data structure repair using goal-directed reasoning | 
ICSE-bp-50 | Micro execution. | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-50 Micro execution. | 
ICSE-bp-51 | Requirements fixation. | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-51 Requirements fixation. | 
ICSE-bp-52 | Live API documentation. | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-52 Live API documentation. | 
ICSE-bp-53 | Debugging reinvented: asking and answering why and why not questions about program behavior | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-53 Debugging reinvented: asking and answering why and why not questions about program behavior | 
ICSE-bp-54 | Scalable detection of semantic clones | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-54 Scalable detection of semantic clones | 
ICSE-bp-55 | Recommending adaptive changes for framework evolution | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-55 Recommending adaptive changes for framework evolution | 
ICSE-bp-56 | Precise memory leak detection for java software using container profiling | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-56 Precise memory leak detection for java software using container profiling | 
ICSE-bp-57 | Predicting accurate and actionable static analysis warnings: an experimental approach | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-57 Predicting accurate and actionable static analysis warnings: an experimental approach | 
ICSE-bp-58 | The effect of program and model structure on mc/dc test adequacy coverage | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-58 The effect of program and model structure on mc/dc test adequacy coverage | 
ICSE-bp-59 | Automatically finding patches using genetic programming | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-59 Automatically finding patches using genetic programming | 
ICSE-bp-60 | Does distributed development affect software quality?: an empirical case study of Windows Vista | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-60 Does distributed development affect software quality?: an empirical case study of Windows Vista | 
ICSE-bp-61 | A sense of community: A research agenda for software ecosystems | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-61 A sense of community: A research agenda for software ecosystems | 
ICSE-bp-62 | How we refactor, and how we know it | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-62 How we refactor, and how we know it | 
ICSE-bp-63 | Invariant-based automatic testing of AJAX user interfaces | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-63 Invariant-based automatic testing of AJAX user interfaces | 
ICSE-bp-64 | Effective static deadlock detection | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-64 Effective static deadlock detection | 
ICSE-bp-65 | Reverse engineering feature models | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-65 Reverse engineering feature models | 
ICSE-bp-66 | Run-time efficient probabilistic model checking | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-66 Run-time efficient probabilistic model checking | 
ICSE-bp-67 | Mining parametric specifications | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-67 Mining parametric specifications | 
ICSE-bp-68 | Verifying multi-threaded software using smt-based context-bounded model checking | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-68 Verifying multi-threaded software using smt-based context-bounded model checking | 
ICSE-bp-69 | On-demand feature recommendations derived from mining public product descriptions | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-69 On-demand feature recommendations derived from mining public product descriptions | 
ICSE-bp-70 | Configuring global software teams: a multi-company analysis of project productivity, quality, and profits | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-70 Configuring global software teams: a multi-company analysis of project productivity, quality, and profits | 
ICSE-bp-71 | Programs, tests, and oracles: the foundations of testing revisited | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-71 Programs, tests, and oracles: the foundations of testing revisited | 
ICSE-bp-72 | Software architecture: foundations, theory, and practice | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-72 Software architecture: foundations, theory, and practice | 
ICSE-bp-73 | Model checking <u>lots</u> of systems: efficient verification of temporal properties in software product lines | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-73 Model checking <u>lots</u> of systems: efficient verification of temporal properties in software product lines | 
ICSE-bp-74 | Developers ask reachability questions | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-74 Developers ask reachability questions | 
ICSE-bp-75 | NavClus: a graphical recommender for assisting code exploration. | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-75 NavClus: a graphical recommender for assisting code exploration. | 
ICSE-bp-76 | 35th International Conference on Software Engineering, ICSE '13, San Francisco, CA, USA, May 18-26, 2013 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-76 35th International Conference on Software Engineering, ICSE '13, San Francisco, CA, USA, May 18-26, 2013 | 
ICSE-bp-77 | Understanding integer overflow in C/C++ | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-77 Understanding integer overflow in C/C++ | 
ICSE-bp-78 | Partial models: towards modeling and reasoning with uncertainty | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-78 Partial models: towards modeling and reasoning with uncertainty | 
ICSE-bp-79 | Using dynamic analysis to discover polynomial and array invariants | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-79 Using dynamic analysis to discover polynomial and array invariants | 
ICSE-bp-80 | How do professional developers comprehend software? | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-80 How do professional developers comprehend software? | 
ICSE-bp-81 | A tactic-centric approach for automating traceability of quality concerns | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-81 A tactic-centric approach for automating traceability of quality concerns | 
ICSE-bp-82 | Amplifying tests to validate exception handling code | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ICSE-bp-82 Amplifying tests to validate exception handling code | 
