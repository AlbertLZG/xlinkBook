PLDI-bp-1 | Flick: A Flexible, Optimizing IDL Compiler | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-1 Flick: A Flexible, Optimizing IDL Compiler | 
PLDI-bp-2 | Automatic verification of pointer programs using monadic second-order logic | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-2 Automatic verification of pointer programs using monadic second-order logic | 
PLDI-bp-3 | Dynamic Feedback: An Effective Technique for Adaptive Computing | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-3 Dynamic Feedback: An Effective Technique for Adaptive Computing | 
PLDI-bp-4 | TIL: A Type-Directed Optimizing Compiler for ML | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-4 TIL: A Type-Directed Optimizing Compiler for ML | 
PLDI-bp-5 | GUM: A Portable Parallel Implementation of Haskell | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-5 GUM: A Portable Parallel Implementation of Haskell | 
PLDI-bp-6 | VCODE: a Retargetable, Extensible, Very Fast Dynamic Code Generation System | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-6 VCODE: a Retargetable, Extensible, Very Fast Dynamic Code Generation System | 
PLDI-bp-7 | Whole program paths | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-7 Whole program paths | 
PLDI-bp-8 | Compressing Java Class Files | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-8 Compressing Java Class Files | 
PLDI-bp-9 | Load-Reuse Analysis: Design and Evaluation | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-9 Load-Reuse Analysis: Design and Evaluation | 
PLDI-bp-10 | Eliminating array bounds checks through dependent types | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-10 Eliminating array bounds checks through dependent types | 
PLDI-bp-11 | Units: Cool Modules for HOT Languages | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-11 Units: Cool Modules for HOT Languages | 
PLDI-bp-12 | Thin Locks: Featherweight Synchronization for Java | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-12 Thin Locks: Featherweight Synchronization for Java | 
PLDI-bp-13 | ESP: Path-Sensitive Program Verification in Polynomial Time | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-13 ESP: Path-Sensitive Program Verification in Polynomial Time | 
PLDI-bp-14 | Adoption and Focus: Practical Linear Types for Imperative Programming | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-14 Adoption and Focus: Practical Linear Types for Imperative Programming | 
PLDI-bp-15 | Automatically Proving the Correctness of Compiler Optimizations | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-15 Automatically Proving the Correctness of Compiler Optimizations | 
PLDI-bp-16 | A static analyzer for large safety-critical software | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-16 A static analyzer for large safety-critical software | 
PLDI-bp-17 | CSSV: towards a realistic tool for statically detecting all buffer overflows in C | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-17 CSSV: towards a realistic tool for statically detecting all buffer overflows in C | 
PLDI-bp-18 | Automatically Proving the Correctness of Compiler Optimizations | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-18 Automatically Proving the Correctness of Compiler Optimizations | 
PLDI-bp-19 | Dynamo: a transparent dynamic optimization system | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-19 Dynamo: a transparent dynamic optimization system | 
PLDI-bp-20 | ABCD: eliminating array bounds checks on demand | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-20 ABCD: eliminating array bounds checks on demand | 
PLDI-bp-21 | Practicing JUDO: Java under dynamic optimizations | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-21 Practicing JUDO: Java under dynamic optimizations | 
PLDI-bp-22 | Ultra-fast Aliasing Analysis using CLA: A Million Lines of C Code in a Second | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-22 Ultra-fast Aliasing Analysis using CLA: A Million Lines of C Code in a Second | 
PLDI-bp-23 | SPL: A Language and Compiler for DSP Algorithms | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-23 SPL: A Language and Compiler for DSP Algorithms | 
PLDI-bp-24 | Java without the Coffee Breaks: A Nonintrusive Multiprocessor Garbage Collector | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-24 Java without the Coffee Breaks: A Nonintrusive Multiprocessor Garbage Collector | 
PLDI-bp-25 | Termination proofs for systems code | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-25 Termination proofs for systems code | 
PLDI-bp-26 | Compiler and runtime support for efficient software transactional memory | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-26 Compiler and runtime support for efficient software transactional memory | 
PLDI-bp-27 | Effective static race detection for Java | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-27 Effective static race detection for Java | 
PLDI-bp-28 | Valgrind: a framework for heavyweight dynamic binary instrumentation | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-28 Valgrind: a framework for heavyweight dynamic binary instrumentation | 
PLDI-bp-29 | Iterative context bounding for systematic testing of multithreaded programs | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-29 Iterative context bounding for systematic testing of multithreaded programs | 
PLDI-bp-30 | Optimistic parallelism requires abstractions | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-30 Optimistic parallelism requires abstractions | 
PLDI-bp-31 | The ant and the grasshopper: fast and accurate pointer analysis for millions of lines of code | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-31 The ant and the grasshopper: fast and accurate pointer analysis for millions of lines of code | 
PLDI-bp-32 | Fault-tolerant typed assembly language | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-32 Fault-tolerant typed assembly language | 
PLDI-bp-33 | Cloning-based context-sensitive pointer alias analysis using binary decision diagrams | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-33 Cloning-based context-sensitive pointer alias analysis using binary decision diagrams | 
PLDI-bp-34 | KISS: keep it simple and sequential | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-34 KISS: keep it simple and sequential | 
PLDI-bp-35 | Jedd: a BDD-based relational extension of Java | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-35 Jedd: a BDD-based relational extension of Java | 
PLDI-bp-36 | Pin: building customized program analysis tools with dynamic instrumentation | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-36 Pin: building customized program analysis tools with dynamic instrumentation | 
PLDI-bp-37 | Jungloid mining: helping to navigate the API jungle | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-37 Jungloid mining: helping to navigate the API jungle | 
PLDI-bp-38 | Mitosis compiler: an infrastructure for speculative threading based on pre-computation slices | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-38 Mitosis compiler: an infrastructure for speculative threading based on pre-computation slices | 
PLDI-bp-39 | Automatic pool allocation: improving performance by controlling data structure layout in the heap | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-39 Automatic pool allocation: improving performance by controlling data structure layout in the heap | 
PLDI-bp-40 | Programming by sketching for bit-streaming programs | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-40 Programming by sketching for bit-streaming programs | 
PLDI-bp-41 | ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '14, Edinburgh, United Kingdom - June 09 - 11, 2014 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-41 ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '14, Edinburgh, United Kingdom - June 09 - 11, 2014 | 
PLDI-bp-42 | Foundations of the C++ concurrency memory model | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-42 Foundations of the C++ concurrency memory model | 
PLDI-bp-43 | A practical automatic polyhedral parallelizer and locality optimizer | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-43 A practical automatic polyhedral parallelizer and locality optimizer | 
PLDI-bp-44 | Grammar-based whitebox fuzzing | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-44 Grammar-based whitebox fuzzing | 
PLDI-bp-45 | Trace-based just-in-time type specialization for dynamic languages | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-45 Trace-based just-in-time type specialization for dynamic languages | 
PLDI-bp-46 | PetaBricks: a language and compiler for algorithmic choice | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-46 PetaBricks: a language and compiler for algorithmic choice | 
PLDI-bp-47 | Stretching transactional memory | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-47 Stretching transactional memory | 
PLDI-bp-48 | Binary analysis for measurement and attribution of program performance | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-48 Binary analysis for measurement and attribution of program performance | 
PLDI-bp-49 | Data representation synthesis | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-49 Data representation synthesis | 
PLDI-bp-50 | Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2011, San Jose, CA, USA, June 4-8, 2011 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-50 Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2011, San Jose, CA, USA, June 4-8, 2011 | 
PLDI-bp-51 | An analysis of the dynamic behavior of JavaScript programs | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-51 An analysis of the dynamic behavior of JavaScript programs | 
PLDI-bp-52 | A GPGPU compiler for memory optimization and parallelism management | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-52 A GPGPU compiler for memory optimization and parallelism management | 
PLDI-bp-53 | FlumeJava: easy, efficient data-parallel pipelines | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-53 FlumeJava: easy, efficient data-parallel pipelines | 
PLDI-bp-54 | Safe to the last instruction: automated verification of a type-safe operating system | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-54 Safe to the last instruction: automated verification of a type-safe operating system | 
PLDI-bp-55 | ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '13, Seattle, WA, USA, June 16-19, 2013 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-55 ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '13, Seattle, WA, USA, June 16-19, 2013 | 
PLDI-bp-56 | Concurrent data representation synthesis | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-56 Concurrent data representation synthesis | 
PLDI-bp-57 | ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '12, Beijing, China - June 11 - 16, 2012 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=PLDI-bp-57 ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '12, Beijing, China - June 11 - 16, 2012 | 
