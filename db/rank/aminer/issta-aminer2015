ISSTA-bp-1 | Op-timization of code rate and spreading factor for direct-sequence CDMA systems | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-1 Op-timization of code rate and spreading factor for direct-sequence CDMA systems | 
ISSTA-bp-2 | Ac-tive learning for automatic classi cation of software | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-2 Ac-tive learning for automatic classi cation of software | 
ISSTA-bp-3 | Proceedings of the 1996 ACM SIGSOFT international symposium on Software testing and analysis | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-3 Proceedings of the 1996 ACM SIGSOFT international symposium on Software testing and analysis | 
ISSTA-bp-4 | Why State-of-the-Art is not State-of-the-Practice (Panel Abstract) | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-4 Why State-of-the-Art is not State-of-the-Practice (Panel Abstract) | 
ISSTA-bp-5 | Comparing ow and context sensitivity onthe modi~cations-side-e~ects problem | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-5 Comparing ow and context sensitivity onthe modi~cations-side-e~ects problem | 
ISSTA-bp-6 | Automated Flaw Finding using Simulated Annealing | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-6 Automated Flaw Finding using Simulated Annealing | 
ISSTA-bp-7 | Korat: automated testing based on Java predicates | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-7 Korat: automated testing based on Java predicates | 
ISSTA-bp-8 | How Far is Infinity? Using Asymptotic Analysis in Multiple Antennas Systems | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-8 How Far is Infinity? Using Asymptotic Analysis in Multiple Antennas Systems | 
ISSTA-bp-9 | Joint dirty-paper pre-coding and down-link beamforming | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-9 Joint dirty-paper pre-coding and down-link beamforming | 
ISSTA-bp-10 | Multipath Resistant Coherent Timing-Error-Detector for DS-CDMA applications | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-10 Multipath Resistant Coherent Timing-Error-Detector for DS-CDMA applications | 
ISSTA-bp-11 | Minimizing failure-inducing input | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-11 Minimizing failure-inducing input | 
ISSTA-bp-12 | On subdomains: Testing, profiles, and components | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-12 On subdomains: Testing, profiles, and components | 
ISSTA-bp-13 | TimeAware test suite prioritization | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-13 TimeAware test suite prioritization | 
ISSTA-bp-14 | Effective typestate verification in the presence of aliasing | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-14 Effective typestate verification in the presence of aliasing | 
ISSTA-bp-15 | Effective typestate verification in the presence of aliasing | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-15 Effective typestate verification in the presence of aliasing | 
ISSTA-bp-16 | DSD-Crasher: a hybrid analysis tool for bug finding | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-16 DSD-Crasher: a hybrid analysis tool for bug finding | 
ISSTA-bp-17 | Dytan: a generic dynamic taint analysis framework | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-17 Dytan: a generic dynamic taint analysis framework | 
ISSTA-bp-18 | Static specification mining using automata-based abstractions | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-18 Static specification mining using automata-based abstractions | 
ISSTA-bp-19 | Debugging in Parallel | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-19 Debugging in Parallel | 
ISSTA-bp-20 | Finding what's not there: a new approach to revealing neglected conditions in software | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-20 Finding what's not there: a new approach to revealing neglected conditions in software | 
ISSTA-bp-21 | Evolutionary testing in the presence of loop-assigned flags: a testability transformation approach | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-21 Evolutionary testing in the presence of loop-assigned flags: a testability transformation approach | 
ISSTA-bp-22 | SABER: smart analysis based error reduction | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-22 SABER: smart analysis based error reduction | 
ISSTA-bp-23 | Improving adaptability via program steering | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-23 Improving adaptability via program steering | 
ISSTA-bp-24 | Practical pluggable types for java | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-24 Practical pluggable types for java | 
ISSTA-bp-25 | Comparing software metrics tools | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-25 Comparing software metrics tools | 
ISSTA-bp-26 | A metric for software readability | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-26 A metric for software readability | 
ISSTA-bp-27 | HAMPI: a solver for string constraints | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-27 HAMPI: a solver for string constraints | 
ISSTA-bp-28 | Testing CPU emulators | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-28 Testing CPU emulators | 
ISSTA-bp-29 | Precise interface identification to improve testing and analysis of web applications | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-29 Precise interface identification to improve testing and analysis of web applications | 
ISSTA-bp-30 | Proceedings of the 20th International Symposium on Software Testing and Analysis, ISSTA 2011, Toronto, ON, Canada, July 17-21, 2011 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-30 Proceedings of the 20th International Symposium on Software Testing and Analysis, ISSTA 2011, Toronto, ON, Canada, July 17-21, 2011 | 
ISSTA-bp-31 | Formal analysis of the effectiveness and predictability of random testing | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-31 Formal analysis of the effectiveness and predictability of random testing | 
ISSTA-bp-32 | Exploiting program dependencies for scalable multiple-path symbolic execution | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-32 Exploiting program dependencies for scalable multiple-path symbolic execution | 
ISSTA-bp-33 | OCAT: object capture-based automated testing | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-33 OCAT: object capture-based automated testing | 
ISSTA-bp-34 | Automatic detection of unsafe component loadings | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-34 Automatic detection of unsafe component loadings | 
ISSTA-bp-35 | International Symposium on Software Testing and Analysis, ISSTA '13, Lugano, Switzerland, July 15-20, 2013 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-35 International Symposium on Software Testing and Analysis, ISSTA '13, Lugano, Switzerland, July 15-20, 2013 | 
ISSTA-bp-36 | International Symposium on Software Testing and Analysis, ISSTA 2012, Minneapolis, MN, USA, July 15-20, 2012 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ISSTA-bp-36 International Symposium on Software Testing and Analysis, ISSTA 2012, Minneapolis, MN, USA, July 15-20, 2012 | 
