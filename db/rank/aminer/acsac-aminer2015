ACSAC-bp-1 | Kernel and Shell-Based Applications Integrity Assurance | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-1 Kernel and Shell-Based Applications Integrity Assurance | 
ACSAC-bp-2 | Doc, Wyatt, and Virgil: Prototyping Storage Jamming Defenses | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-2 Doc, Wyatt, and Virgil: Prototyping Storage Jamming Defenses | 
ACSAC-bp-3 | 13th Annual Computer Security Applications Conference (ACSAC 1997), 8-12 December 1997, San Diego, CA, USA | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-3 13th Annual Computer Security Applications Conference (ACSAC 1997), 8-12 December 1997, San Diego, CA, USA | 
ACSAC-bp-4 | esign Choices For Symmetric Key Based Inter-Domain Authentication Protocols In Distributed Systems | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-4 esign Choices For Symmetric Key Based Inter-Domain Authentication Protocols In Distributed Systems | 
ACSAC-bp-5 | A Comparison of Multilevel Structured Query Language (SQL) Implementations | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-5 A Comparison of Multilevel Structured Query Language (SQL) Implementations | 
ACSAC-bp-6 | 13th Annual Computer Security Applications Conference (ACSAC 1996), 9-13 December 1996, San Diego, CA, USA | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-6 13th Annual Computer Security Applications Conference (ACSAC 1996), 9-13 December 1996, San Diego, CA, USA | 
ACSAC-bp-7 | Using Abuse Case Models for Security Requirements Analysis | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-7 Using Abuse Case Models for Security Requirements Analysis | 
ACSAC-bp-8 | The ARBAC99 Model for Administration of Roles | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-8 The ARBAC99 Model for Administration of Roles | 
ACSAC-bp-9 | Toward a Taxonomy and Costing Method for Security Services | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-9 Toward a Taxonomy and Costing Method for Security Services | 
ACSAC-bp-10 | Adding Availability to Log Services of Untrusted Machines | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-10 Adding Availability to Log Services of Untrusted Machines | 
ACSAC-bp-11 | NetSTAT: A Network-Based Intrusion Detection Approach | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-11 NetSTAT: A Network-Based Intrusion Detection Approach | 
ACSAC-bp-12 | Role-Based Access Control Framework for Network Enterprises | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-12 Role-Based Access Control Framework for Network Enterprises | 
ACSAC-bp-13 | The RRA97 Model for Role-Based Administration of Role Hierarchies | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-13 The RRA97 Model for Role-Based Administration of Role Hierarchies | 
ACSAC-bp-14 | Throttling Viruses: Restricting propagation to defeat malicious mobile code | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-14 Throttling Viruses: Restricting propagation to defeat malicious mobile code | 
ACSAC-bp-15 | Controlled Physical Random Functions | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-15 Controlled Physical Random Functions | 
ACSAC-bp-16 | Representing TCP/IP Connectivity For Topological Analysis of Network Security | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-16 Representing TCP/IP Connectivity For Topological Analysis of Network Security | 
ACSAC-bp-17 | Intrusion Detection: A Bioinformatics Approach | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-17 Intrusion Detection: A Bioinformatics Approach | 
ACSAC-bp-18 | Intrusion Detection: A Bioinformatics Approach | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-18 Intrusion Detection: A Bioinformatics Approach | 
ACSAC-bp-19 | Isolated Program Execution: An Application Transparent Approach for Executing Untrusted Programs | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-19 Isolated Program Execution: An Application Transparent Approach for Executing Untrusted Programs | 
ACSAC-bp-20 | ITS4: A static vulnerability scanner for C and C++ code | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-20 ITS4: A static vulnerability scanner for C and C++ code | 
ACSAC-bp-21 | Micro-Threading: A New Approach to Future RISC | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-21 Micro-Threading: A New Approach to Future RISC | 
ACSAC-bp-22 | The Chinese Remainder Theorem and its application in a high-speed RSA crypto chip | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-22 The Chinese Remainder Theorem and its application in a high-speed RSA crypto chip | 
ACSAC-bp-23 | Why Information Security is Hard-An Economic Perspective | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-23 Why Information Security is Hard-An Economic Perspective | 
ACSAC-bp-24 | The Performance Measurement of Cryptographic Primitives on Palm Devices | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-24 The Performance Measurement of Cryptographic Primitives on Palm Devices | 
ACSAC-bp-25 | The First Real Operating System for Reconfigurable Computers | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-25 The First Real Operating System for Reconfigurable Computers | 
ACSAC-bp-26 | Genoa TIE, Advanced Boundary Controller Experiment | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-26 Genoa TIE, Advanced Boundary Controller Experiment | 
ACSAC-bp-27 | From Languages to Systems: Understanding Practical Application Development in Security-typed Languages | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-27 From Languages to Systems: Understanding Practical Application Development in Security-typed Languages | 
ACSAC-bp-28 | A Framework for a Collaborative DDoS Defense | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-28 A Framework for a Collaborative DDoS Defense | 
ACSAC-bp-29 | Backtracking Algorithmic Complexity Attacks against a NIDS | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-29 Backtracking Algorithmic Complexity Attacks against a NIDS | 
ACSAC-bp-30 | A Taxonomy of Botnet Structures | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-30 A Taxonomy of Botnet Structures | 
ACSAC-bp-31 | Limits of Static Analysis for Malware Detection | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-31 Limits of Static Analysis for Malware Detection | 
ACSAC-bp-32 | OmniUnpack: Fast, Generic, and Safe Unpacking of Malware | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-32 OmniUnpack: Fast, Generic, and Safe Unpacking of Malware | 
ACSAC-bp-33 | Automated Vulnerability Analysis: Leveraging Control Flow for Evolutionary Input Crafting | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-33 Automated Vulnerability Analysis: Leveraging Control Flow for Evolutionary Input Crafting | 
ACSAC-bp-34 | Tracking Darkports for Network Defense | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-34 Tracking Darkports for Network Defense | 
ACSAC-bp-35 | A Dynamic Technique for Eliminating Buffer Overflow Vulnerabilities (and Other Memory Errors) | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-35 A Dynamic Technique for Eliminating Buffer Overflow Vulnerabilities (and Other Memory Errors) | 
ACSAC-bp-36 | Automatic Generation and Analysis of NIDS Attacks | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-36 Automatic Generation and Analysis of NIDS Attacks | 
ACSAC-bp-37 | The Trustworthy Computing Security Development Lifecycle | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-37 The Trustworthy Computing Security Development Lifecycle | 
ACSAC-bp-38 | Model Checking An Entire Linux Distribution for Security Violations | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-38 Model Checking An Entire Linux Distribution for Security Violations | 
ACSAC-bp-39 | Automated and Safe Vulnerability Assessment | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-39 Automated and Safe Vulnerability Assessment | 
ACSAC-bp-40 | Countering Trusting Trust through Diverse Double-Compiling | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-40 Countering Trusting Trust through Diverse Double-Compiling | 
ACSAC-bp-41 | Automatic Inference and Enforcement of Kernel Data Structure Invariants | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-41 Automatic Inference and Enforcement of Kernel Data Structure Invariants | 
ACSAC-bp-42 | Soft-Timer Driven Transient Kernel Control Flow Attacks and Defense | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-42 Soft-Timer Driven Transient Kernel Control Flow Attacks and Defense | 
ACSAC-bp-43 | Bluetooth Network-Based Misuse Detection | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-43 Bluetooth Network-Based Misuse Detection | 
ACSAC-bp-44 | Semantically Rich Application-Centric Security in Android | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-44 Semantically Rich Application-Centric Security in Android | 
ACSAC-bp-45 | Analyzing Information Flow in JavaScript-Based Browser Extensions | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-45 Analyzing Information Flow in JavaScript-Based Browser Extensions | 
ACSAC-bp-46 | Identification of Bot Commands by Run-Time Execution Monitoring | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-46 Identification of Bot Commands by Run-Time Execution Monitoring | 
ACSAC-bp-47 | The socialbot network: when bots socialize for fame and money | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-47 The socialbot network: when bots socialize for fame and money | 
ACSAC-bp-48 | Distilling critical attack graph surface iteratively through minimum-cost SAT solving | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-48 Distilling critical attack graph surface iteratively through minimum-cost SAT solving | 
ACSAC-bp-49 | Twenty-Seventh Annual Computer Security Applications Conference, ACSAC 2011, Orlando, FL, USA, 5-9 December 2011 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-49 Twenty-Seventh Annual Computer Security Applications Conference, ACSAC 2011, Orlando, FL, USA, 5-9 December 2011 | 
ACSAC-bp-50 | Detecting spammers on social networks | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-50 Detecting spammers on social networks | 
ACSAC-bp-51 | Multi-vendor penetration testing in the advanced metering infrastructure | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-51 Multi-vendor penetration testing in the advanced metering infrastructure | 
ACSAC-bp-52 | Breaking e-banking CAPTCHAs | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-52 Breaking e-banking CAPTCHAs | 
ACSAC-bp-53 | A quantitative analysis of the insecurity of embedded network devices: results of a wide-area scan | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-53 A quantitative analysis of the insecurity of embedded network devices: results of a wide-area scan | 
ACSAC-bp-54 | Annual Computer Security Applications Conference, ACSAC '13, New Orleans, LA, USA, December 9-13, 2013 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-54 Annual Computer Security Applications Conference, ACSAC '13, New Orleans, LA, USA, December 9-13, 2013 | 
ACSAC-bp-55 | Securing untrusted code via compiler-agnostic binary rewriting | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-55 Securing untrusted code via compiler-agnostic binary rewriting | 
ACSAC-bp-56 | Generalized vulnerability extrapolation using abstract syntax trees | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-56 Generalized vulnerability extrapolation using abstract syntax trees | 
ACSAC-bp-57 | 28th Annual Computer Security Applications Conference, ACSAC 2012, Orlando, FL, USA, 3-7 December 2012 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=ACSAC-bp-57 28th Annual Computer Security Applications Conference, ACSAC 2012, Orlando, FL, USA, 3-7 December 2012 | 
