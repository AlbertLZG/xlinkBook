FSE/ESEC-bp-1 | Comparing and Combining Software Defect Detection Techniques: A Replicated Empirical Study | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-1 Comparing and Combining Software Defect Detection Techniques: A Replicated Empirical Study | 
FSE/ESEC-bp-2 | Executable Connectors: Towards Reusable Design Elements | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-2 Executable Connectors: Towards Reusable Design Elements | 
FSE/ESEC-bp-3 | Validating the Defect Detection Performance Advantage of Group Designs for Software Reviews: Report of a Laboratory Experiment Using Program Code | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-3 Validating the Defect Detection Performance Advantage of Group Designs for Software Reviews: Report of a Laboratory Experiment Using Program Code | 
FSE/ESEC-bp-4 | Making Design Patterns explicit in FACE, a Framework Adaptive Composition Environment 1 | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-4 Making Design Patterns explicit in FACE, a Framework Adaptive Composition Environment 1 | 
FSE/ESEC-bp-5 | The Concept of Dynamic Analysis | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-5 The Concept of Dynamic Analysis | 
FSE/ESEC-bp-6 | Components and Generative Programming | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-6 Components and Generative Programming | 
FSE/ESEC-bp-7 | Designing Specification Languages for Process Control Systems: Lessons Learned and Steps to the Future | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-7 Designing Specification Languages for Process Control Systems: Lessons Learned and Steps to the Future | 
FSE/ESEC-bp-8 | Isolating cause-effect chains from computer programs | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-8 Isolating cause-effect chains from computer programs | 
FSE/ESEC-bp-9 | A family of test adequacy criteria for database-driven applications | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-9 A family of test adequacy criteria for database-driven applications | 
FSE/ESEC-bp-10 | Eliminating redundancies with a "composition with adaptation" meta-programming technique | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-10 Eliminating redundancies with a "composition with adaptation" meta-programming technique | 
FSE/ESEC-bp-11 | Predicting problems caused by component upgrades | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-11 Predicting problems caused by component upgrades | 
FSE/ESEC-bp-12 | Coverage criteria for GUI testing | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-12 Coverage criteria for GUI testing | 
FSE/ESEC-bp-13 | SYNERGY: a new algorithm for property checking | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-13 SYNERGY: a new algorithm for property checking | 
FSE/ESEC-bp-14 | Controlling factors in evaluating path-sensitive error detection techniques | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-14 Controlling factors in evaluating path-sensitive error detection techniques | 
FSE/ESEC-bp-15 | Mining specifications of malicious behavior | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-15 Mining specifications of malicious behavior | 
FSE/ESEC-bp-16 | Globally distributed software development project performance: an empirical analysis | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-16 Globally distributed software development project performance: an empirical analysis | 
FSE/ESEC-bp-17 | Object and reference immutability using Java generics | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-17 Object and reference immutability using Java generics | 
FSE/ESEC-bp-18 | Automatic consistency assessment for query results in dynamic environments | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-18 Automatic consistency assessment for query results in dynamic environments | 
FSE/ESEC-bp-19 | Reasoning about partial goal satisfaction for requirements and design engineering | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-19 Reasoning about partial goal satisfaction for requirements and design engineering | 
FSE/ESEC-bp-20 | A classification system and analysis for aspect-oriented programs | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-20 A classification system and analysis for aspect-oriented programs | 
FSE/ESEC-bp-21 | CUTE: a concolic unit testing engine for C | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-21 CUTE: a concolic unit testing engine for C | 
FSE/ESEC-bp-22 | Automatic generation of suggestions for program investigation | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-22 Automatic generation of suggestions for program investigation | 
FSE/ESEC-bp-23 | Context- and path-sensitive memory leak detection | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-23 Context- and path-sensitive memory leak detection | 
FSE/ESEC-bp-24 | What makes a good bug report? | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-24 What makes a good bug report? | 
FSE/ESEC-bp-25 | Efficient online monitoring of web-service SLAs | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-25 Efficient online monitoring of web-service SLAs | 
FSE/ESEC-bp-26 | Asserting and checking determinism for multithreaded programs | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-26 Asserting and checking determinism for multithreaded programs | 
FSE/ESEC-bp-27 | Graph-based mining of multiple object usage patterns | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-27 Graph-based mining of multiple object usage patterns | 
FSE/ESEC-bp-28 | Darwin: an approach for debugging evolving programs | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-28 Darwin: an approach for debugging evolving programs | 
FSE/ESEC-bp-29 | How do fixes become bugs? | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-29 How do fixes become bugs? | 
FSE/ESEC-bp-30 | Proving Programs Robust | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-30 Proving Programs Robust | 
FSE/ESEC-bp-31 | Proactive detection of collaboration conflicts | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-31 Proactive detection of collaboration conflicts | 
FSE/ESEC-bp-32 | Creating and evolving developer documentation: understanding the decisions of open source contributors | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-32 Creating and evolving developer documentation: understanding the decisions of open source contributors | 
FSE/ESEC-bp-33 | Developer fluency: achieving true mastery in software projects | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-33 Developer fluency: achieving true mastery in software projects | 
FSE/ESEC-bp-34 | Staged concurrent program analysis | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-34 Staged concurrent program analysis | 
FSE/ESEC-bp-35 | Seeking the ground truth: a retroactive study on the evolution and migration of software libraries | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-35 Seeking the ground truth: a retroactive study on the evolution and migration of software libraries | 
FSE/ESEC-bp-36 | Scalable test data generation from multidimensional models | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-36 Scalable test data generation from multidimensional models | 
FSE/ESEC-bp-37 | Assessing the value of branches with what-if analysis | https://www.google.com.hk/?gws_rd=cr,ssl#safe=strict&q=FSE/ESEC-bp-37 Assessing the value of branches with what-if analysis | 
