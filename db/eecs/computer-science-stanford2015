CS 1U | Practical Unix | https://explorecourses.stanford.edu/search?q=CS 1U | A practical introduction to using the Unix operating system with a focus on Linux command line skills. Class will consist of video tutorials and weekly hands-on lab sections. The time listed on AXESS is for the first week's logistical meeting only. Topics include: grep and regular expressions, ZSH, Vim and Emacs, basic and advanced GDB features, permissions, working with the file system, revision control, Unix utilities, environment customization, and using Python for shell scripts. Topics may be added, given sufficient interest. Course website: http://cs1u.stanford.edu
CS 2C | Multimedia Production | https://explorecourses.stanford.edu/search?q=CS 2C | Sound, image and video editing techniques and applications, including understanding file formats and publishing multimedia online. Topics include GarageBand, Photoshop, iMovie, and production best practices. Weekly lecture followed by lab section. Second unit for additional creative production assignments completed outside of class time and Final Project with group. Not a programming course, but will use computer multimedia applications heavily for editing.
CS 9 | Problem-Solving for the CS Technical Interview | https://explorecourses.stanford.edu/search?q=CS 9 | This course will prepare students to interview for software engineering and related internships and full-time positions in industry. Drawing on multiple sources of actual interview questions, students will learn key problem-solving strategies specific to the technical/coding interview. Students will be encouraged to synthesize information they have learned across different courses in the major. Emphasis will be on the oral and combination written-oral modes of communication common in coding interviews, but which are unfamiliar settings for problem solving for many students. Prerequisites: CS 106B or X.
CS 27 | Literature and Social Online Learning (COMPLIT 239B, ENGLISH 239B) | https://explorecourses.stanford.edu/search?q=CS 27 | Study, develop, and test new digital methods, games, apps, interactive social media uses to innovate how the humanities can engage and educate students and the public today. Exploring well-known literary texts, digital storytelling forms and literary communities online, students work individually and in interdisciplinary teams to develop innovative projects aimed at bringing literature to life. Tasks include literary role-plays on Twitter; researching existing digital pedagogy and literary projects, games, and apps; reading and coding challenges; collaborative social events mediated by new technology. Minimal prerequisites which vary for students in CS and the humanities; please check with instructors.
CS 45N | Computers and Photography: From Capture to Sharing | https://explorecourses.stanford.edu/search?q=CS 45N | Preference to freshmen with experience in photography and use of computers. Elements of photography, such as lighting, focus, depth of field, aperture, and composition. How a photographer makes photos available for computer viewing, reliably stores them, organizes them, tags them, searches them, and distributes them online. No programming experience required. Digital SLRs and editing software will be provided to those students who do not wish to use their own.
CS 54N | Great Ideas in Computer Science | https://explorecourses.stanford.edu/search?q=CS 54N | Stanford Introductory Seminar. Preference to freshmen. Covers the intellectual tradition of computer science emphasizing ideas that reflect the most important milestones in the history of the discipline.  No prior experience with programming is assumed.  Topics include programming and problem solving; implementing computation in hardware; algorithmic efficiency; the theoretical limits of computation; cryptography and security; and the philosophy behind artificial intelligence.
CS 55N | Computer and Information Security | https://explorecourses.stanford.edu/search?q=CS 55N | Preference to freshmen. Why computer systems are vulnerable to attack. Common software bugs, how to exploit technology for blocking common attacks, cryptography, and legal issues.
CS 76N | Elections and Technology | https://explorecourses.stanford.edu/search?q=CS 76N | Freshmen Seminar. Since the disastrous Presidential election in Florida in 2000, problems with and worries about technology in elections have gained increasing attention. Are electronic voting machines secure? Are paper ballots secure? Why can't we just vote over our cell phones or the internet? Should voters have to show identification? How do legislators decide these things? How can technologists be heard? We'll look into these questions as we watch others struggle with them in the 2012 Presidential election.
CS 81N | Hackers and Heroes | https://explorecourses.stanford.edu/search?q=CS 81N | This course is about dreamers, role models, and the spirit of adventure. Hackers are said to be the soul of computing: playful programmers who think progress is best made by trial and error, guided by the "hacker ethic." Another view has hackers as nettlesome troublemakers -- "computer bums" at best, or maybe just plain criminals. In this class, you'll decide, by interviewing real hackers about their exploits and learning how to do your own hacks. We'll study major moments in the fifty-year history of hacking and read from texts including Steven Levy's "Hackers," John Markoff's "What the Dormouse Said," Andy Hertzfeld's "Revolution in The Valley," and Peter Seibel's "Coders at Work."
CS 91SI | Digital Canvas: Intro to Visual Design on the Web | https://explorecourses.stanford.edu/search?q=CS 91SI | Introduction to visual design concepts with a focus on modern interfaces like web, mobile and app. Topics include visual design elements and principles such as color theory, layout and composition, typography, and aspects of communication. Students will analyze existing designs, and use various technical tools to implement their own designs. This course consists of a series of in-class activities, design projects, peer critique sessions, and guest speakers. Recommended prerequisites: some web programming experience. Application required.
CS 101 | Introduction to Computing Principles | https://explorecourses.stanford.edu/search?q=CS 101 | Introduces the essential ideas of computing: data representation, algorithms, programming "code", computer hardware, networking, security, and social issues. Students learn how computers work and what they can do through hands-on exercises. In particular, students will see the capabilities and weaknesses of computer systems so they are not mysterious or intimidating. Course features many small programming exercises, although no prior programming experience is assumed or required. CS101 is not a complete programming course such as CS106A. CS101 is effectively an alternative to CS105. A laptop computer is recommended for the in-class exercises.
CS 103 | Mathematical Foundations of Computing | https://explorecourses.stanford.edu/search?q=CS 103 | Mathematical foundations required for computer science, including propositional predicate logic, induction, sets, functions, and relations. Formal language theory, including regular expressions, grammars, finite automata, Turing machines, and NP-completeness. Mathematical rigor, proof techniques, and applications. May not be taken by students who have completed 103A,B or 103X. Prerequisite: 106A or equivalent.
CS 105 | Introduction to Computers | https://explorecourses.stanford.edu/search?q=CS 105 | For non-technical majors. What computers are and how they work. Practical experience in programming. Construction of computer programs and basic design techniques. A survey of Internet technology and the basics of computer hardware. Students in technical fields and students looking to acquire programming skills should take 106A or 106X. Students with prior computer science experience at the level of 106 or above require consent of instructor. Prerequisite: minimal math skills.
CS 106A | Programming Methodology (ENGR 70A) | https://explorecourses.stanford.edu/search?q=CS 106A | Introduction to the engineering of computer applications emphasizing modern software engineering principles: object-oriented design, decomposition, encapsulation, abstraction, and testing. Uses the Java programming language. Emphasis is on good programming style and the built-in facilities of the Java language. No prior programming experience required. Summer quarter enrollment is limited and requires an application.
CS 106L | Standard C++ Programming Laboratory | https://explorecourses.stanford.edu/search?q=CS 106L | Supplemental lab to 106B and 106X. Additional features of standard C++ programming practice. Possible topics include advanced C++ language features, standard libraries, STL containers and algorithms, object memory management, operator overloading, and inheritance. Prerequisite: consent of instructor. Corequisite: 106B or 106X.
CS 106X | Programming Abstractions (Accelerated) (ENGR 70X) | https://explorecourses.stanford.edu/search?q=CS 106X | Intensive version of 106B for students with a strong programming background interested in a rigorous treatment of the topics at an accelerated pace. Additional advanced material and more challenging projects. Prerequisite: excellence in 106A or equivalent, or consent of instructor.
CS 107E | Computer Systems from the Ground Up | https://explorecourses.stanford.edu/search?q=CS 107E | Introduction to the fundamental concepts of computer systems through bare metal programming on the Raspberry Pi. Explores how five concepts come together in computer systems: hardware, architecture, assembly code, the C language, and software development tools. Students do all programming with a Raspberry Pi kit and several add-ons (LEDs, buttons). Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, compilation, memory organization and management, debugging, hardware, and I/O. Prerequisite: 106B or X, and consent of instructor.
CS 108 | Object-Oriented Systems Design | https://explorecourses.stanford.edu/search?q=CS 108 | Software design and construction in the context of large OOP libraries. Taught in Java. Topics: OOP design, design patterns, testing, graphical user interface (GUI) OOP libraries, software engineering strategies, approaches to programming in teams. Prerequisite: 107.
CS 109 | Introduction to Probability for Computer Scientists | https://explorecourses.stanford.edu/search?q=CS 109 | Topics include: counting and combinatorics, random variables, conditional probability, independence, distributions, expectation, point estimation, and limit theorems. Applications of probability in computer science including machine learning and the use of probability in the analysis of algorithms. Prerequisites: 103, 106B or X, multivariate calculus at the level of MATH 51 or CME 100 or equivalent.
CS 109L | Statistical Computing with R Laboratory | https://explorecourses.stanford.edu/search?q=CS 109L | Supplemental lab to CS109.  Introduces the R programming language for statistical computing.  Topics include basic facilities of R including mathematical, graphical, and probability functions, building simulations, introductory data fitting and machine learning.  Provides exposure to the functional programming paradigm.  Corequisite: CS109.
CS 110 | Principles of Computer Systems | https://explorecourses.stanford.edu/search?q=CS 110 | Principles and practice of engineering of computer software and hardware systems. Topics include: techniques for controlling complexity; strong modularity using client-server design, virtual memory, and threads; networks; atomicity and coordination of parallel activities; security, and encryption; and performance optimizations. Prerequisite: 107.
CS 122 | Artificial Intelligence: Philosophy, Ethics, & Impact (SYMSYS 122) | https://explorecourses.stanford.edu/search?q=CS 122 | Recent advances in computing may place us at the threshold of a unique turning point in human history. Soon we are likely to entrust management of our environment, economy, security, infrastructure, food production, healthcare, and to a large degree even our personal activities, to artificially intelligent computer systems. The prospect of "turning over the keys" to increasingly autonomous systems raises many complex and troubling questions. How will society respond as versatile robots and machine-learning systems displace an ever-expanding spectrum of blue- and white-collar workers? Will the benefits of this technological revolution be broadly distributed or accrue to a lucky few? How can we ensure that these systems respect our ethical principles when they make decisions at speeds and for rationales that exceed our ability to comprehend? What, if any, legal rights and responsibilities should we grant them? And should we regard them merely as sophisticated tools or as a newly emerging form of life? The goal of this course is to equip students with the intellectual tools, ethical foundation, and psychological framework to successfully navigate the coming age of intelligent machines.
CS 124 | From Languages to Information (LINGUIST 180, LINGUIST 280) | https://explorecourses.stanford.edu/search?q=CS 124 | Extracting meaning, information, and structure from human language text, speech, web pages, genome sequences, social networks, or any less structured information. Methods include: string algorithms, edit distance, language modeling, naive Bayes, inverted indices, vector semantics. Applications such as question answering, sentiment analysis, information retrevial, text classification, social network models, machine translation, genomic sequence alignment, spell checking, speech processing.  Prerequisite: CS103, CS107, CS109.
CS 131 | Computer Vision: Foundations and Applications | https://explorecourses.stanford.edu/search?q=CS 131 | Robots that can navigate space and perform duties, search engines that can index billions of images and videos, algorithms that can diagnose medical images for diseases, or smart cars that can see and drive safely: Lying in the heart of these modern AI applications are computer vision technologies that can perceive, understand and reconstruct the complex visual world. This course is designed for students who are interested in learning about the fundamental principles and important applications of computer vision. Course will introduce a number of fundamental concepts in computer vision and expose students to a number of real-world applications, plus guide students through a series of well designed projects such that they will get to implement cutting-edge computer vision algorithms. Prerequisites: Students should be familiar with Matlab (i.e. have programmed in Matlab before) and Linux; plus Calculus & Linear Algebra.
CS 142 | Web Applications | https://explorecourses.stanford.edu/search?q=CS 142 | Concepts and techniques used in constructing interactive web applications. Browser-side web facilities such as HTML, cascading stylesheets, javascript, and the document object model. Server-side technologies such as sessions, templates, relational databases, and object-relational mapping. Issues in web security and application scalability. New models of web application deployment. Prerequisites: CS 107 and CS 108.
CS 143 | Compilers | https://explorecourses.stanford.edu/search?q=CS 143 | Principles and practices for design and implementation of compilers and interpreters. Topics: lexical analysis; parsing theory; symbol tables; type systems; scope; semantic analysis; intermediate representations; runtime environments; code generation; and basic program analysis and optimization. Students construct a compiler for a simple object-oriented language during course programming projects. Prerequisites: 103 or 103B, and 107.
CS 148 | Introduction to Computer Graphics and Imaging | https://explorecourses.stanford.edu/search?q=CS 148 | Introductory prerequisite course in the computer graphics sequence introducing students to the technical concepts behind creating synthetic computer generated images. Focuses on using OpenGL to create visual imagery, as well as an understanding of the underlying mathematical concepts including triangles, normals, interpolation, texture mapping, bump mapping, etc. Course will cover fundamental understanding of light and color, as well as how it impacts computer displays and printers. Class will discuss more thoroughly how light interacts with the environment, constructing engineering models such as the BRDF, plus various simplifications into more basic lighting and shading models. Also covers ray tracing technology for creating virtual images, while drawing parallels between ray tracers and real world cameras to illustrate various concepts. Anti-aliasing and acceleration structures are also discussed. The final class mini-project consists of building out a ray tracer to create visually compelling images. Starter codes and code bits will be provided to aid in development, but this class focuses on what you can do with the code as opposed to what the code itself looks like. Therefore grading is weighted toward in person "demos" of the code in action - creativity and the production of impressive visual imagery are highly encouraged. Prerequisites: CS 107, MATH 51.
CS 149 | Parallel Computing | https://explorecourses.stanford.edu/search?q=CS 149 | This course is an introduction to parallelism and parallel programming.  Most new computer architectures are parallel; programming these machines requires knowledge of the basic issues of and techniques for writing parallel software. Topics:  varieties of parallelism in current hardware (e.g., fast networks, multicore, accelerators such as GPUs, vector instruction sets), importance of locality, implicit vs. explicit parallelism, shared vs. non-shared memory, synchronization mechanisms (locking, atomicity, transactions, barriers), and parallel programming models (threads, data parallel/streaming, futures, SPMD, message passing, SIMT, transactions, and nested parallelism).  Significant parallel programming assignments will be given as homework.  The course is open to students who have completed the introductory CS course sequence through 110 and have taken CS 143.
CS 154 | Introduction to Automata and Complexity Theory | https://explorecourses.stanford.edu/search?q=CS 154 | This course provides a mathematical introduction to the following questions: What is computation? Given a computational model, what problems can we hope to solve in principle with this model? Besides those solvable in principle, what problems can we hope to efficiently solve? In many cases we can give completely rigorous answers; in other cases, these questions have become major open problems in computer science and mathematics. By the end of this course, students will be able to classify computational problems in terms of their computational complexity (Is the problem regular? Not regular? Decidable? Recognizable? Neither? Solvable in P? NP-complete? PSPACE-complete?, etc.). Students will gain a deeper appreciation for some of the fundamental issues in computing that are independent of trends of technology, such as the Church-Turing Thesis and the P versus NP problem. Prerequisites: CS 103 or 103B.
CS 155 | Computer and Network Security | https://explorecourses.stanford.edu/search?q=CS 155 | For seniors and first-year graduate students. Principles of computer systems security. Attack techniques and how to defend against them. Topics include: network attacks and defenses, operating system security, application security (web, apps, databases), malware, privacy, and security for mobile devices. Course projects focus on building reliable code. Prerequisite: 110. Recommended: basic Unix.
CS 161 | Design and Analysis of Algorithms | https://explorecourses.stanford.edu/search?q=CS 161 | Worst and average case analysis. Recurrences and asymptotics. Efficient algorithms for sorting, searching, and selection. Data structures: binary search trees, heaps, hash tables. Algorithm design techniques: divide-and-conquer, dynamic programming, greedy algorithms, amortized analysis, randomization. Algorithms for fundamental graph problems: minimum-cost spanning tree, connected components, topological sort, and shortest paths. Possible additional topics: network flow, string searching. Prerequisite: 103 or 103B; 109 or STATS 116.
CS 168 | The Modern Algorithmic Toolbox | https://explorecourses.stanford.edu/search?q=CS 168 | This course will provide a rigorous and hands-on introduction to the central ideas and algorithms that constitute the core of the modern algorithmsntoolkit.  Emphasis will be on understanding the high-level theoretical intuitions and principles underlying the algorithms we discuss, as well asndeveloping a concrete understanding of when and how to implement and apply the algorithms.  The course will be structured as a sequence of one-week investigations; each week will introduce one algorithmic idea, and discuss the motivation, theoretical underpinning, and practical applications of that algorithmic idea.  Each topic will be accompanied by a mini-project in which students will be guided through a practical application of the ideas of the week.  Topics include hashing, dimension reduction and LSH, boosting, linear programming, gradient descent,  sampling, and basic data representation and coding. Prerequisites: CS107 and CS161, or permission from the instructor.
CS 170 | Stanford Laptop Orchestra: Composition, Coding, and Performance (MUSIC 128) | https://explorecourses.stanford.edu/search?q=CS 170 | Classroom instantiation of the Stanford Laptop Orchestra (SLOrk) which includes public performances. An ensemble of more than 20 humans, laptops, controllers, and special speaker arrays designed to provide each computer-mediated instrument with its sonic identity and presence. Topics and activities include issues of composing for laptop orchestras, instrument design, sound synthesis, programming, and live performance. May be repeated four times for credit.
CS 181 | Computers, Ethics, and Public Policy | https://explorecourses.stanford.edu/search?q=CS 181 | (Formerly 201.) Primarily for majors entering computer-related fields. Ethical and social issues related to the development and use of computer technology. Ethical theory, and social, political, and legal considerations. Scenarios in problem areas: privacy, reliability and risks of complex systems, and responsibility of professionals for applications and consequences of their work. Prerequisite: 106B or X.
CS 181W | Computers, Ethics, and Public Policy (WIM) | https://explorecourses.stanford.edu/search?q=CS 181W | Writing-intensive version of CS181. Satisfies the WIM requirement for Computer Science and Computer Systems Engineering undergraduates.
CS 183B | How to Start a Startup | https://explorecourses.stanford.edu/search?q=CS 183B | The course is designed to be a one-class practical MBA equivalent for engineers that want to start startups.  We'll try to cover everything younneed to know other than how to build a product. Topics include: having ideas, getting users, company culture, fundraising, hiring, operations,nmanagements, and more. The format of the class will be guest lectures from experts in each subject. The class will focus more on practical advice than theory, although many speakers will also tell personal stories.
CS 191 | Senior Project | https://explorecourses.stanford.edu/search?q=CS 191 | Restricted to Computer Science and Computer Systems Engineering students. Group or individual projects under faculty direction. Register using instructor's section number. A project can be either a significant software application or publishable research. Software application projects include substantial programming and modern user-interface technologies and are comparable in scale to shareware programs or commercial applications. Research projects may result in a paper publishable in an academic journal or presentable at a conference. Required public presentation of final application or research results.
CS 192 | Programming Service Project | https://explorecourses.stanford.edu/search?q=CS 192 | Restricted to Computer Science students. Appropriate academic credit (without financial support) is given for volunteer computer programming work of public benefit and educational value.
CS 193A | Android Programming | https://explorecourses.stanford.edu/search?q=CS 193A | Introduction to building applications for Android platform. Examines key concepts of Android programming: tool chain, application life-cycle, views, controls, intents, designing mobile UIs, networking, threading, and more. Features ten weekly lectures and a series of small programming projects. Phone not required, but a phone makes the projects more engaging. Prerequisites: 106B or Java experience at 106B level.
CS 193C | Client-Side Internet Technologies | https://explorecourses.stanford.edu/search?q=CS 193C | Client-side technologies used to create web sites such as sophisticated Web 2.0 interfaces similar to Google maps. XHTML, CSS, JavaScript, document object model (DOM), AJAX, and Flash. Prerequisite: programming experience at the level of 106A.
CS 194 | Software Project | https://explorecourses.stanford.edu/search?q=CS 194 | Design, specification, coding, and testing of a significant team programming project under faculty supervision. Documentation includes a detailed proposal. Public demonstration of the project at the end of the quarter. Prerequisites: CS 110 and CS 161.
CS 194H | User Interface Design Project | https://explorecourses.stanford.edu/search?q=CS 194H | Advanced methods for designing, prototyping, and evaluating user interfaces to computing applications. Novel interface technology, advanced interface design methods, and prototyping tools. Substantial, quarter-long course project that will be presented in a public presentation. Prerequisites: CS 147, or permission of instructor.
CS 196 | Computer Consulting | https://explorecourses.stanford.edu/search?q=CS 196 | Focus is on Macintosh and Windows operating system maintenance and troubleshooting through hardware and software foundation and concepts. Topics include operating systems, networking, security, troubleshooting methodology with emphasis on Stanford's computing environment. Not a programming course. Prerequisite: 1C or equivalent.
CS 199P | Independent Work | https://explorecourses.stanford.edu/search?q=CS 199P | (Staff)
CS 200 | Care and Feeding of Large-Scale Web Services | https://explorecourses.stanford.edu/search?q=CS 200 | Advances in cloud technologies are making it easier than ever to build web services.  Today, one can choose from a number of cloud providers to buildnweb sites, mobile and web apps.  Successful scaling of such services, however, is far from trivial. This course discusses technologies that are critical to successful operation of large-scale web services: Global load balancing via DNS, and Comparison of CDNs; Understanding TCP's impact on global client-side latency; Effect of tags and local storage on client-side latency; Backend servers: RPCs, server threading architecture and cluster management; Data storage alternatives: SQL and NoSQL; Faster access to data: Memcached and 20 years of RDMA; Flash's Role in Large Scale Distributed Systems; Cloud: Public, Private and Hybrid; Log processing: Hive and Dremel. The goal is to equip students with a good understanding of challenges and current solutions for service scaling. There is no homework.  Instead, students are expected to read background materials and attend class discussions.
CS 202 | Law for Computer Science Professionals | https://explorecourses.stanford.edu/search?q=CS 202 | Intellectual property law as it relates to computer science including copyright registration, patents, and trade secrets; contract issues such as non-disclosure/non-compete agreements, license agreements, and works-made-for-hire; dispute resolution; and principles of business formation and ownership. Emphasis is on topics of current interest such as open source and the free software movement, peer-to-peer sharing, encryption, data mining, and spam.
CS 204 | Legal Informatics | https://explorecourses.stanford.edu/search?q=CS 204 | Legal informatics based on representation of regulations in computable form. Encoding regulations facilitate creation of legal information systems with significant practical value. Convergence of technological trends, growth of the Internet, advent of semantic web technology, and progress in computational logic make computational law prospects better. Topics: current state of computational law, prospects and problems, philosophical and legal implications. This course is *Cross* listed with LAW 729. Prerequisite: basic concepts of programming.
CS 205A | Mathematical Methods for Robotics, Vision, and Graphics | https://explorecourses.stanford.edu/search?q=CS 205A | Continuous mathematics background necessary for research in robotics, vision, and graphics. Possible topics: linear algebra; the conjugate gradient method; ordinary and partial differential equations; vector and tensor calculus. Prerequisites: 106B or X; MATH 51; or equivalents.
CS 207 | The Economics of Software | https://explorecourses.stanford.edu/search?q=CS 207 | How businesses move software products into the marketplace and how the associated intellectual capital is exploited. The value of creators and managers. Concepts that are outside of the common knowledge of computer scientists such as business terms and spreadsheet computations to quantitatively compare alternatives. Goal is to contribute to informed decision making in high-tech product design, acquisition, production, marketing, selection of business structures, outsourcing, and impact of taxation policies. No specific background required. External experts complement class presentations.
CS 210B | Software Project Experience with Corporate Partners | https://explorecourses.stanford.edu/search?q=CS 210B | Continuation of CS210A. Focus is on real-world software development. Corporate partners seed projects with loosely defined challenges from their R&D labs; students innovate to build their own compelling software solutions. Student teams are treated as start-up companies with a budget and a technical advisory board comprised of the instructional staff and corporate liaisons. Teams will typically travel to the corporate headquarters of their collaborating partner, meaning some teams will travel internationally. Open loft classroom format such as found in Silicon Valley software companies. Exposure to: current practices in software engineering; techniques for stimulating innovation; significant development experience with creative freedoms; working in groups; real world software engineering challenges; public presentation of technical work; creating written descriptions of technical work. Prerequisites: CS 210A
CS 210L | Introducing Software through Video Stories | https://explorecourses.stanford.edu/search?q=CS 210L | In this one-unit lab where coding meets film, software development teams from CS210 are paired with film students. This resulting cross-disciplinary group will create a short video that tells an engaging and creative story about the software developed by the team in CS210. The class will introduce students to principles of short form narrative storytelling and the visual language of film, as well as cover the technical principles of DSLR cinematography and non-linear editing. This course will offer students the experience of creating a film in partnership with a producing team.
CS 221 | Artificial Intelligence: Principles and Techniques | https://explorecourses.stanford.edu/search?q=CS 221 | Artificial intelligence (AI) has had a huge impact in many areas, including medical diagnosis, speech recognition, robotics, web search, advertising, and scheduling.  This course focuses on the foundational concepts that drive these applications.  In short, AI is the mathematics of making good decisions given incomplete information (hence the need for probability) and limited computation (hence the need for algorithms).  Specific topics include search, constraint satisfaction, game playing, Markov decision processes, graphical models, machine learning, and logic. Prerequisites: CS 103 or CS 103B/X, CS 106B or CS 106X, CS 107, and CS 109 (algorithms, probability, and programming experience).
CS 223A | Introduction to Robotics (ME 320) | https://explorecourses.stanford.edu/search?q=CS 223A | Robotics foundations in modeling, design, planning, and control. Class covers relevant results from geometry, kinematics, statics, dynamics, motion planning, and control, providing the basic methodologies and tools in robotics research and applications. Concepts and models are illustrated through physical robot platforms, interactive robot simulations, and video segments relevant to historical research developments or to emerging application areas in the field. Recommended: matrix algebra.
CS 224N | Natural Language Processing (LINGUIST 284) | https://explorecourses.stanford.edu/search?q=CS 224N | Methods for processing human language information and the underlying computational properties of natural languages. Syntactic and semantic processing from linguistic and algorithmic perspectives. Focus is on modern quantitative techniques in NLP: using large corpora, statistical models for acquisition, translation, and interpretation; and representative systems. Prerequisites: CS124 or CS121/221.
CS 224W | Social and Information Networks | https://explorecourses.stanford.edu/search?q=CS 224W | (Formerly 322) How do diseases spread? Who are the influencers? How can we predict friends and enemies in a social network? How information flows and mutates as it is passed through networks? Behind each of these questions there is an intricate wiring diagram, a network, that defines the interactions between the components. And we will never understand these questions unless we understand the networks behind them. The course will cover recent research on the structure and analysis of such large social and information networks and on models and algorithms that abstract their basic properties. Class will explore how to practically analyze large-scale network data and how to reason about it through models for network structure and evolution. Topics include methods for link analysis and network community detection, diffusion and information propagation on the web, virus outbreak detection in networks, and connections with work in the social sciences and economics.
CS 227B | General Game Playing | https://explorecourses.stanford.edu/search?q=CS 227B | A general game playing system accepts a formal description of a game to play it without human intervention or algorithms designed for specific games. Hands-on introduction to these systems and artificial intelligence techniques such as knowledge representation, reasoning, learning, and rational behavior. Students create GGP systems to compete with each other and in external competitions. Prerequisite: programming experience. Recommended: 103 or equivalent.
CS 228 | Probabilistic Graphical Models: Principles and Techniques | https://explorecourses.stanford.edu/search?q=CS 228 | Probabilistic graphical modeling languages for representing complex domains, algorithms for reasoning using these representations, and learning these representations from data. Topics include: Bayesian and Markov networks, extensions to temporal modeling such as hidden Markov models and dynamic Bayesian networks, exact and approximate probabilistic inference algorithms, and methods for learning models from data. Also included are sample applications to various domains including speech recognition, biological modeling and discovery, medical diagnosis, message encoding, vision, and robot motion planning. Prerequisites: basic probability theory and algorithm design and analysis.
CS 229 | Machine Learning | https://explorecourses.stanford.edu/search?q=CS 229 | Topics: statistical pattern recognition, linear and non-linear regression, non-parametric methods, exponential family, GLMs, support vector machines, kernel methods, model/feature selection, learning theory, VC dimension, clustering, density estimation, EM, dimensionality reduction, ICA, PCA, reinforcement learning and adaptive control, Markov decision processes, approximate dynamic programming, and policy search. Prerequisites: linear algebra, and basic probability and statistics.
CS 229T | Statistical Learning Theory (STATS 231) | https://explorecourses.stanford.edu/search?q=CS 229T | (Same as STATS 231) How do we formalize what it means for an algorithm to learn from data?  This course focuses on developing mathematical tools for answering this question.  We will present various common learning algorithms and prove theoretical guarantees about them.  Topics include online learning, kernel methods, generalization bounds (uniform convergence), and spectral methods.  Prerequisites: A solid background in linear algebra and probability theory, statistics and machine learning (STATS 315A or CS 229).  Convex optimization (EE 364a) is helpful but not required.
CS 231A | Computer Vision: From 3D Reconstruction to Recognition | https://explorecourses.stanford.edu/search?q=CS 231A | (Formerly 223B) An introduction to the concepts and applications in computer vision. Topics include: cameras and projection models, low-level image processing methods such as filtering and edge detection; mid-level vision topics such as segmentation and clustering; shape reconstruction from stereo, as well as high-level vision tasks such as object recognition, scene recognition, face detection and human motion categorization. Prerequisites: linear algebra, basic probability and statistics.
CS 231B | The Cutting Edge of Computer Vision | https://explorecourses.stanford.edu/search?q=CS 231B | (Formerly 223C) More than one-third of the brain is engaged in visual processing, the most sophisticated human sensory system. Yet visual recognition technology has fundamentally influenced our lives on the same scale and scope as text-based technology has, thanks to Google, Twitter, Facebook, etc. This course is designed for those students who are interested in cutting edge computer vision research, and/or are aspiring to be an entrepreneur using vision technology. Course will guide students through the design and implementation of three core vision technologies: segmentation, detection and classification on three highly practical, real-world problems. Course will focus on teaching the fundamental theory, detailed algorithms, practical engineering insights, and guide them to develop state-of-the-art systems evaluated based on the most modern and standard benchmark datasets. Prerequisites: CS2223B or equivalent and a good machine learning background (i.e. CS221, CS228, CS229). Fluency in Matlab and C/C++.
CS 231M | Mobile Computer Vision | https://explorecourses.stanford.edu/search?q=CS 231M | The course surveys recent developments in computer vision, graphics and image processing for mobile application. Topics of interest include: feature extraction, image enhancement and digital photography, 3D scene understanding and modeling, virtual augmentation, object recognition and categorization, human activity recognition. As part of this course, students will familiarize with a state-of-the-art mobile hardware and software development platform: an NVIDIA Tegra-based Android tablet, with relevant libraries such as OpenCV and FCam. Tablets will be available for each student team. Prerequisites: Knowledge of linear algebra, probability, as well as concepts introduced in either CS131A or CS231A and CS232 (or equivalent) are necessary for understanding the material covered in this class. C++ (or Java) programming experience is expected.
CS 231N | Convolutional Neural Networks for Visual Recognition | https://explorecourses.stanford.edu/search?q=CS 231N | Computer Vision has become ubiquitous in our society, with applications innsearch, image understanding, apps, mapping, medicine, drones, andnself-driving cars. Core to many of these applications are the tasks of image classification, localization and detection. This course is a deep dive into details of neural network architectures with a focus on learning end-to-end models for these tasks, particularly image classification. During the 10-week course, students will learn to implement, train and debug their own neural networks and gain a detailed understanding of cutting-edge research in computer vision. The final assignment will involve training a multi-million parameter convolutional neural network and applying it on the largest image classification dataset (ImageNet). We will focus on teaching how to set up the problem of image recognition, the learning algorithms (e.g. backpropagation), practical engineering tricks for training and fine-tuning the networks and guide the students through hands-on assignments and a final course project. Much of the background and materials of this course will be drawn from the ImageNet Challenge: http://image-net.org/challenges/LSVRC/2014/index. Prerequisites: Proficiency in Python; familiarity with C/C++; CS 131 and CS 229 or equivalents; Math 21 or equivalent, linear algebra.
CS 232 | Digital Image Processing (EE 368) | https://explorecourses.stanford.edu/search?q=CS 232 | Image sampling and quantization color, point operations, segmentation, morphological image processing, linear image filtering and correlation, image transforms, eigenimages, multiresolution image processing, noise reduction and restoration, feature extraction and recognition tasks, image registration. Emphasis is on the general principles of image processing. Students learn to apply material by implementing and investigating image processing algorithms in Matlab and optionally on Android mobile devices. Term project. Recommended: EE261, EE278.
CS 238 | Decision Making under Uncertainty (AA 228) | https://explorecourses.stanford.edu/search?q=CS 238 | This course is designed to increase awareness and appreciation for why uncertainty matters, particularly for aerospace applications. Introduces decision making under uncertainty from a computational perspective and provides an overview of the necessary tools for building autonomous and decision-support systems. Following an introduction to probabilistic models and decision theory, the course will cover computational methods for solving decision problems with stochastic dynamics, model uncertainty, and imperfect state information. Topics include: Bayesian networks, influence diagrams, dynamic programming, reinforcement learning, and partially observable Markov decision processes. Applications cover: air traffic control, aviation surveillance systems, autonomous vehicles, and robotic planetary exploration. Prerequisites: basic probability and fluency in a high-level programming language.
CS 240 | Advanced Topics in Operating Systems | https://explorecourses.stanford.edu/search?q=CS 240 | Recent research. Classic and new papers. Topics: virtual memory management, synchronization and communication, file systems, protection and security, operating system extension techniques, fault tolerance, and the history and experience of systems programming. Prerequisite: 140 or equivalent.
CS 242 | Programming Languages | https://explorecourses.stanford.edu/search?q=CS 242 | Central concepts in modern programming languages, impact on software development, language design trade-offs, and implementation considerations. Functional, imperative, and object-oriented paradigms. Formal semantic methods and program analysis. Modern type systems, higher order functions and closures, exceptions and continuations. Modularity, object-oriented languages, and concurrency. Runtime support for language features, interoperability, and security issues. Prerequisite: 107, or experience with Lisp, C, and an object-oriented language.
CS 243 | Program Analysis and Optimizations | https://explorecourses.stanford.edu/search?q=CS 243 | Program analysis techniques used in compilers and software development tools to improve productivity, reliability, and security. The methodology of applying mathematical abstractions such as graphs, fixpoint computations, binary decision diagrams in writing complex software, using compilers as an example. Topics include data flow analysis, instruction scheduling, register allocation, parallelism, data locality, interprocedural analysis, and garbage collection. Prerequisites: 103 or 103B, and 107.
CS 244 | Advanced Topics in Networking | https://explorecourses.stanford.edu/search?q=CS 244 | Classic papers, new ideas, and research papers in networking. Architectural principles: naming, addressing, routing; congestion control, traffic management, QoS; wireless and mobility; overlay networks and virtualization; network security; switching and routing; content distribution; and proposals for future Internet structures. Prerequisite: 144 or equivalent.
CS 244B | Distributed Systems | https://explorecourses.stanford.edu/search?q=CS 244B | Distributed operating systems and applications issues, emphasizing high-level protocols and distributed state sharing as the key technologies. Topics: distributed shared memory, object-oriented distributed system design, distributed directory services, atomic transactions and time synchronization, application-sufficient consistency, file access, process scheduling, process migration, and storage/communication abstractions on distribution, scale, robustness in the face of failure, and security.  Prerequisites: CS 144 and CS 249A.
CS 244E | Networked Wireless Systems | https://explorecourses.stanford.edu/search?q=CS 244E | Design and implementation of wireless networks and mobile systems. The course will commence with a short retrospective of wireless communication and initially touch on some of the fundamental physical layer properties of various wireless communication technologies. The focus will then shift to design of media access control and routing layers for various wireless systems. The course will also examine adaptations necessary at transport and higher layers to cope with node mobility and error-prone nature of the wireless medium. Finally, it will conclude with a brief overview of other related issues including emerging wireless/mobile applications. Prerequisites: EE 284
CS 246 | Mining Massive Data Sets | https://explorecourses.stanford.edu/search?q=CS 246 | The course will discuss data mining and machine learning algorithms for analyzing very large amounts of data. The emphasis will be on Map Reduce as a tool for creating parallel algorithms that can process very large amounts of data. Topics include: Frequent itemsets and Association rules, Near Neighbor Search in High Dimensional Data, Locality Sensitive Hashing (LSH), Dimensionality reduction, Recommender Systems, Clustering, Link Analysis, Large-scale machine learning, Data streams,  Analysis of Social-network Graphs, and Web Advertising. Prerequisites: At lease one of CS107 or CS145; At least one of CS109 or STAT116, or equivalent.
CS 246H | Mining Massive Data Sets Hadoop Lab | https://explorecourses.stanford.edu/search?q=CS 246H | Supplement to CS 246 providing additional material on Hadoop. Students will learn how to implement data mining algorithms using Hadoop, how to implement and debug complex MapReduce jobs in Hadoop, and how to use some of the tools in the Hadoop ecosystem for data mining and machine learning. Topics: Hadoop, MapReduce, HDFS, combiners, secondary sort, distributed cache, SQL on Hadoop, Hive, Cloudera ML/Oryx, Mahout, Hadoop streaming, implementing Hadoop jobs, debugging Hadoop jobs, TF-IDF, Pig, Sqoop, Oozie, HBase, Impala. Prerequisite: CS 107 or equivalent.
CS 247 | Human-Computer Interaction Design Studio | https://explorecourses.stanford.edu/search?q=CS 247 | Project-based focus on interaction design process, especially early-stage design and rapid prototyping. Methods used in interaction design including needs analysis, user observation, sketching, concept generation, scenario building, and evaluation. Prerequisites: 147 or equivalent background in design thinking; 106B or equivalent background in programming.
CS 248 | Interactive Computer Graphics | https://explorecourses.stanford.edu/search?q=CS 248 | This is the second course in the computer graphics sequence, and as such it assumes a strong familiarity with rendering and image creation. The course has a strong focus on computational geometry, animation, and simulation. Topics include splines, implicit surfaces, geometric modeling, collision detection, animation curves, particle systems and crowds, character animation, articulation, skinning, motion capture and editing, rigid and deformable bodies, and fluid simulation. As a final project, students implement an interactive video game utilizing various concepts covered in the class. Games may be designed on mobile devices, in a client/server/browser environment, or on a standard personal computer. Prerequisite: CS148.
CS 249A | Object-Oriented Programming from a Modeling and Simulation Perspective | https://explorecourses.stanford.edu/search?q=CS 249A | Topics: large-scale software development approaches for complex applications, class libraries and frameworks; encapsulation, use of inheritance and dynamic dispatch, design of interfaces and interface/implementation separation, exception handling, smart pointers and reference management, minimalizing dependencies and value-oriented programming. Inheritance: when and why multiple inheritance naming, directories, manager, and disciplined use of design patterns including functors, event notification and iterators. Prerequisites: C, C++, and programming methodology as developed in 106B or X, and 107 (107 may be taken concurrently). Recommended: 193D.
CS 254 | Computational Complexity | https://explorecourses.stanford.edu/search?q=CS 254 | An introduction to computational complexity theory. Topics include the P versus NP problem; diagonalization; space complexity: PSPACE, Savitch's theorem, and NL=coNL; counting problems and #P-completeness; circuit complexity; pseudorandomness and derandomization; complexity of approximation; quantum computing; complexity barriers.  Prerequisites: 154 or equivalent; mathematical maturity.
CS 255 | Introduction to Cryptography | https://explorecourses.stanford.edu/search?q=CS 255 | For advanced undergraduates and graduate students. Theory and practice of cryptographic techniques used in computer security. Topics: encryption (symmetric and public key), digital signatures, data integrity, authentication, key management, PKI, zero-knowledge protocols, and real-world applications. Prerequisite: basic probability theory.
CS 259D | Data Mining for Cyber Security | https://explorecourses.stanford.edu/search?q=CS 259D | The massive increase in the rate of novel cyber attacks has made data-mining-based techniques a critical component in detecting security threats. The course covers various applications of data mining in computer and network security. Topics include: Overview of the state of information security; malware detection; network and host intrusion detection; web, email, and social network security; authentication and authorization anomaly detection; alert correlation; and potential issues such as privacy issues and adversarial machine learning. Prerequisites: Data mining / machine learning at the level of CS 246 or CS 229; familiarity with computer systems and networks at least at the level of CS 110; CS 140 and CS 144 strongly recommended; CS 155 recommended but not required.
CS 262 | Computational Genomics (BIOMEDIN 262) | https://explorecourses.stanford.edu/search?q=CS 262 | Applications of computer science to genomics, and concepts in genomics from a computer science point of view. Topics: dynamic programming, sequence alignments, hidden Markov models, Gibbs sampling, and probabilistic context-free grammars. Applications of these tools to sequence analysis: comparative genomics, DNA sequencing and assembly, genomic annotation of repeats, genes, and regulatory sequences, microarrays and gene expression, phylogeny and molecular evolution, and RNA structure. Prerequisites: 161 or familiarity with basic algorithmic concepts. Recommended: basic knowledge of genetics.
CS 264 | Beyond Worst-Case Analysis | https://explorecourses.stanford.edu/search?q=CS 264 | This course is motivated by problems for which the traditional worst-case analysis of algorithms fails to differentiate meaningfully between different solutions, or recommends an intuitively "wrong" solution over the "right" one. This course studies systematically alternatives to traditional worst-case analysis that nevertheless enable rigorous and robust guarantees on the performance of an algorithm.  Topics include: instance optimality; smoothed analysis; parameterized analysis and condition numbers; models of data (pseudorandomness, locality, diffuse adversaries, etc.); average-case analysis; robust distributional analysis; resource augmentation; planted and semi-random graph models. Motivating problems will be drawn from online algorithms, online learning, constraint satisfaction problems, graph partitioning, scheduling, linear programming, hashing, machine learning, and auction theory. Prerequisites: CS161 (required). CS261 is recommended but not required.
CS 265 | Randomized Algorithms and Probabilistic Analysis (CME 309) | https://explorecourses.stanford.edu/search?q=CS 265 | Randomness pervades the natural processes around us, from the formation of networks, to genetic recombination, to quantum physics. Randomness is also a powerful tool that can be leveraged to create algorithms and data structures which, in many cases, are more efficient and simpler than their deterministic counterparts. This course covers the key tools of probabilistic analysis, and application of these tools to understand the behaviors of random processes and algorithms. Emphasis is on theoretical foundations, though we will apply this theory broadly, discussing applications in machine learning and data analysis, networking, and systems. Topics include tail bounds, the probabilistic method, Markov chains, and martingales, with applications to analyzing random graphs, metric embeddings, random walks, and a host of powerful and elegant randomized algorithms. Prerequisites: CS 161 and STAT 116, or equivalents and instructor consent.
CS 266 | Parameterized Algorithms and Complexity | https://explorecourses.stanford.edu/search?q=CS 266 | An introduction to the area of parameterized algorithms and complexity, which explores multidimensional methods for measuring the difficulty and feasibility of solving computational problems. Topics include: fixed-parameter tractability (FPT) and its characterizations, FPT algorithms for hard problems, the W-hierarchy (W[1], W[2], W[P], and complete problems for these classes), and the relationships between parameterized questions and classical theory questions. Prerequisites: CS 154 and 161 or the equivalent mathematical maturity.
CS 268 | Geometric Algorithms | https://explorecourses.stanford.edu/search?q=CS 268 | Techniques for design and analysis of efficient geometric algorithms for objects in 2-, 3-, and higher dimensions. Topics: convexity, triangulations and simplicial complexes, sweeping, partitioning, and point location. Voronoi/Delaunay diagrams and their properties. Arrangements of curves and surfaces. Intersection and visibility problems. Geometric searching and optimization. Random sampling methods. Impact of numerical issues in geometric computation. Example applications to robotic motion planning, visibility preprocessing and rendering in graphics, model-based recognition in computer vision, and structural molecular biology. Prerequisite: discrete algorithms at the level of 161. Recommended: 164.
CS 270 | Modeling Biomedical Systems: Ontology, Terminology, Problem Solving (BIOMEDIN 210) | https://explorecourses.stanford.edu/search?q=CS 270 | Methods for modeling biomedical systems and for making those models explicit in the context of building software systems. Emphasis is on intelligent systems for decision support and Semantic Web applications. Topics: knowledge representation, controlled terminologies, ontologies, reusable problem solvers, and knowledge acquisition. Recommended: exposure to object-oriented systems, basic biology.
CS 272 | Introduction to Biomedical Informatics Research Methodology (BIOE 212, BIOMEDIN 212, GENE 212) | https://explorecourses.stanford.edu/search?q=CS 272 | Hands-on software building. Student teams conceive, design, specify, implement, evaluate, and report on a software project in the domain of biomedicine. Creating written proposals, peer review, providing status reports, and preparing final reports. Guest lectures from professional biomedical informatics systems builders on issues related to the process of project management. Software engineering basics. Because the team projects start in the first week of class, attendance that week is strongly recommended. Prerequisites: BIOMEDIN 210 or 211 or 214 or 217 or consent of instructor.
CS 273A | A Computational Tour of the Human Genome (BIOMEDIN 273A, DBIO 273A) | https://explorecourses.stanford.edu/search?q=CS 273A | Introduction to computational biology through an informatic exploration of the human genome. Topics include: genome sequencing (technologies, assembly, personalized sequencing); functional landscape (genes, gene regulation, repeats, RNA genes, epigenetics); genome evolution (comparative genomics, ultraconservation, co-option). Additional topics may include population genetics, personalized genomics, and ancient DNA. Course includes primers on molecular biology, the UCSC Genome Browser, and text processing languages. Guest lectures from genomic researchers. No prerequisites. See http://cs273a.stanford.edu/.
CS 274 | Representations and Algorithms for Computational Molecular Biology (BIOE 214, BIOMEDIN 214, GENE 214) | https://explorecourses.stanford.edu/search?q=CS 274 | Topics: introduction to bioinformatics and computational biology, algorithms for alignment of biological sequences and structures, computing with strings, phylogenetic tree construction, hidden Markov models, Gibbs Sampling, basic structural computations on proteins, protein structure prediction, protein threading techniques, homology modeling, molecular dynamics and energy minimization, statistical analysis of 3D biological data, integration of data sources, knowledge representation and controlled terminologies for molecular biology, microarray analysis, machine learning (clustering and classification), and natural language text processing. Prerequisites: programming skills; consent of instructor for 3 units.
CS 275 | Translational Bioinformatics (BIOMEDIN 217) | https://explorecourses.stanford.edu/search?q=CS 275 | Analytic, storage, and interpretive methods to optimize the transformation of genetic, genomic, and biological data into diagnostics and therapeutics for medicine. Topics: access and utility of publicly available data sources; types of genome-scale measurements in molecular biology and genomic medicine; analysis of microarray data; analysis of polymorphisms, proteomics, and protein interactions; linking genome-scale data to clinical data and phenotypes; and new questions in biomedicine using bioinformatics. Case studies. Prerequisites: programming ability at the level of CS 106A and familiarity with statistics and biology.
CS 275A | Symbolic Musical Information (MUSIC 253) | https://explorecourses.stanford.edu/search?q=CS 275A | Focus on symbolic data for music applications including advanced notation systems, optical music recognition, musical data conversion, and internal structure of MIDI files.
CS 275B | Music Query, Analysis, and Style Simulation (MUSIC 254) | https://explorecourses.stanford.edu/search?q=CS 275B | Leveraging off three synchronized sets of symbolic data resources for notation and analysis, the lab portion introduces students to the open-source Humdrum Toolkit for music representation and analysis.  Issues of data content and quality as well as methods of information retrieval, visualization, and summarization are considered in class. Grading based primarily on student projects. Prerequisite: 253 or consent of instructor.
CS 276 | Information Retrieval and Web Search (LINGUIST 286) | https://explorecourses.stanford.edu/search?q=CS 276 | Text information retrieval systems; efficient text indexing; Boolean, vector space, and probabilistic retrieval models; ranking and rank aggregation; evaluating IR systems. Text clustering and classification: classification algorithms, latent semantic indexing, taxonomy induction; Web search engines including crawling and indexing, link-based algorithms, and web metadata. Prerequisites: CS 107, CS 109, CS 161.
CS 277 | Experimental Haptics | https://explorecourses.stanford.edu/search?q=CS 277 | Computer haptics is the discipline of synthesizing touch feedback in simulated or virtual environments. Course objective is to study and develop computational methods for generating force feedback through haptic interfaces. Theoretical topics: haptic rendering in 3-D virtual environments, simulation of haptic interaction with rigid and deformable objects, haptic interfaces, psychophysics of touch. Applied topics: CHAI3D haptic library, implementation of algorithms for haptic rendering, collision detection, and deformable body simulation. Guest speakers; Lab/programming exercises; open-ended final project. Enrollment limited to 20. Prerequisite: experience with C++. Recommended: 148 or 248, 223A.
CS 298 | Seminar on Teaching Introductory Computer Science (EDUC 298) | https://explorecourses.stanford.edu/search?q=CS 298 | Faculty, undergraduates, and graduate students interested in teaching discuss topics raised by teaching computer science at the introductory level. Prerequisite: consent of instructor.
CS 316 | Advanced Multi-Core Systems (EE 382E) | https://explorecourses.stanford.edu/search?q=CS 316 | In-depth coverage of the architectural techniques used in modern, multi-core chips for mobile and server systems. Advanced processor design techniques (superscalar cores, VLIW cores, multi-threaded cores, energy-efficient cores), cache coherence, memory consistency, vector processors, graphics processors, heterogeneous processors, and hardware support for security and parallel programming. Students will become familiar with complex trade-offs between performance-power-complexity and hardware-software interactions. A central part of CS316 is a project on an open research question on multi-core technologies. Prerequisites: EE 108B. Recommended: CS 149, EE 282.
CS 327A | Advanced Robotic Manipulation | https://explorecourses.stanford.edu/search?q=CS 327A | Advanced control methodologies and novel design techniques for complex human-like robotic and bio mechanical systems. Class covers the fundamentals in operational space dynamics and control, elastic planning, human motion synthesis. Topics include redundancy, inertial properties, haptics, simulation, robot cooperation, mobile manipulation, human-friendly robot design, humanoids and whole-body control. Additional topcs in emerging areas are presented by groups of students at the end-of-quarter mini-symposium. Prerequisites: 223A or equivalent.
CS 334A | Convex Optimization I (CME 364A, EE 364A) | https://explorecourses.stanford.edu/search?q=CS 334A | Convex sets, functions, and optimization problems. The basics of convex analysis and theory of convex programming: optimality conditions, duality theory, theorems of alternative, and applications. Least-squares, linear and quadratic programs, semidefinite programming, and geometric programming. Numerical algorithms for smooth and equality constrained problems; interior-point methods for inequality constrained problems. Applications to signal processing, communications, control, analog and digital circuit design, computational geometry, statistics, machine learning, and mechanical engineering. Prerequisite: linear algebra such as EE263, basic probability.
CS 341 | Project in Mining Massive Data Sets | https://explorecourses.stanford.edu/search?q=CS 341 | Team project in data-mining of very large-scale data, including the problem statement and implementation and evaluation of a solution; some lectures on relevant materials will be given: Hadoop, Hive, Amazon EC2; other topics of possible relevance to some projects: computational advertising and the adwords problem; graph partitioning and community detection; extracting relations from the Web; stream data processing.
CS 346 | Database System Implementation | https://explorecourses.stanford.edu/search?q=CS 346 | A major database system implementation project realizes the principles and techniques covered in earlier courses. Students independently build a complete database management system, from file structures through query processing, with a personally designed feature or extension. Lectures on project details and advanced techniques in database system implementation, focusing on query processing and optimization. Guest speakers from industry on commercial DBMS implementation techniques. Prerequisites: 145, 245, programming experience in C++.
CS 369E | Topics in Analysis of Algorithms: Communication Complexity (for Algorithm Designers) | https://explorecourses.stanford.edu/search?q=CS 369E | Fundamentals of communication complexity, with a strong emphasis on applications to proving lower bounds in important computational models.  Application areas include data stream algorithms, data structures, extended formulations of linear programs, and combinatorial auctions.
CS 371 | Computational Biology in Four Dimensions (CME 371) | https://explorecourses.stanford.edu/search?q=CS 371 | Computational approaches to understanding the three-dimensional spatial organization of biological systems and how that organization evolves over time.  The course will cover cutting-edge research in both physics-based simulation and computational analysis of experimental data, at scales ranging from individual molecules to entire cells.  Prerequisite: CS 106A or equivalent, and an introductory course in biology or biochemistry. Recommended: some experience in mathematical modeling (does not need to be a formal course).
CS 374 | Algorithms in Biology (BIOMEDIN 374) | https://explorecourses.stanford.edu/search?q=CS 374 | Algorithms and computational models applied to molecular biology and genetics. Topics vary annually. Possible topics include biological sequence comparison, annotation of genes and other functional elements, molecular evolution, genome rearrangements, microarrays and gene regulation, protein folding and classification, molecular docking, RNA secondary structure, DNA computing, and self-assembly. May be repeated for credit. Prerequisites: 161, 262 or 274, or BIOCHEM 218, or equivalents.
CS 376 | Human-Computer Interaction Research | https://explorecourses.stanford.edu/search?q=CS 376 | Prepares students to conduct original HCI research by reading and discussing seminal and cutting-edge research papers. Main topics are ubiquitous computing, social computing, and design and creation; breadth topics include HCI methods, programming, visualization, and user modeling. Student pairs perform a quarter-long research project. For undergraduates, CS147 is a prerequisite.
CS 390A | Curricular Practical Training | https://explorecourses.stanford.edu/search?q=CS 390A | Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in internship work and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. 390 A, B, and C may each be taken once.
CS 390B | Curricular Practical Training | https://explorecourses.stanford.edu/search?q=CS 390B | Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in internship work and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. 390A,B,C may each be taken once.
CS 390C | Curricular Practical Training | https://explorecourses.stanford.edu/search?q=CS 390C | Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in internship work and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. 390A,B,C may each be taken once.
CS 393 | Computer Laboratory | https://explorecourses.stanford.edu/search?q=CS 393 | For CS graduate students. A substantial computer program is designed and implemented; written report required. Recommended as a preparation for dissertation research. Register using the section number associated with the instructor. Prerequisite: consent of instructor.
CS 395 | Independent Database Project | https://explorecourses.stanford.edu/search?q=CS 395 | For graduate students in Computer Science. Use of database management or file systems for a substantial application or implementation of components of database management system. Written analysis and evaluation required. Register using the section number associated with the instructor. Prerequisite: consent of instructor.
CS 399 | Independent Project | https://explorecourses.stanford.edu/search?q=CS 399 | Letter grade only.
CS 399P | Independent Project | https://explorecourses.stanford.edu/search?q=CS 399P | Graded satisfactory/no credit.
CS 402 | Beyond Bits and Atoms: Designing Technological Tools (EDUC 236X) | https://explorecourses.stanford.edu/search?q=CS 402 | Practicum in designing and building technology-enabled curricula and hands-on learning environments. Students use software toolkits and state-of-the-art fabrication machines to design educational software, educational toolkits, and tangible user interfaces. The course will focus on designing low-cost technologies, particularly for urban school in the US and abroad. We will explore theoretical and design frameworks from the constructionist learning perspective, critical pedagogy, interaction design for children.
CS 427 | Hero's Journey: AI and Game Theory in 3D Real-time Storytelling | https://explorecourses.stanford.edu/search?q=CS 427 | In the Hero¿s Journey course, the students create a third person game by focusing on creating stories from interactions between the 3D characters and their environment. Each story is auto-generated depending on the narrative framework implemented, and the actions each of the characters decide to take. The focus is creating hero¿s that act and react in a believable manner in a dynamic environment.
CS 448I | Computational Imaging and Display (EE 367) | https://explorecourses.stanford.edu/search?q=CS 448I | Spawned by rapid advances in optical fabrication and digital processing power, a new generation of imaging technology is emerging: computational cameras at the convergence of applied mathematics, optics, and high-performance computing. Similar trends are observed for modern displays pushing the boundaries of resolution, contrast, 3D capabilities, and immersive experiences through the co-design of optics, electronics, and computation. This course serves as an introduction to the emerging field of computational imaging and displays. Students will learn to master bits and photons.
CS 448X | Math and Computer Science behind Special Effects | https://explorecourses.stanford.edu/search?q=CS 448X | Course will focus on a number of case studies of special effects work in feature films, with the aim of elucidating the underlying technical challenges from the standpoint of mathematics and computer science. As a project based class, individuals may more deeply focus on the individual aspects of most interest to them be it rendering, computational geometry, computer vision, physical simulation, or character animation. Guests from industry will speak about effects work they and their colleagues have been involved in as well as discuss some current challenges in the industry. Students will be asked to submit some current challenges either alone or in an appropriate group. Since course may be taken multiple times for credit, and will be open to both undergraduate and graduate students with varied backgrounds and interests, grading will be based on individual effort relative to preparation.  As such currently there are no prerequisites enforced.
CS 476A | Music, Computing, and Design I: Software Paradigms for Computer Music (MUSIC 256A) | https://explorecourses.stanford.edu/search?q=CS 476A | Software design and implementation for computer audio. Strategies, best practices, and tradeoffs in building audio software systems of various sizes (S, M, L, XL), with a focus on interactive (real-time) systems. Lectures examine high-level designs as well as dissect code in a hands-on manner. Course work includes small programming assignments and a final software project. This course is the prerequisite for MUSIC 256B. Prerequisite: experience in C/C++ and/or Java.
CS 476B | Music, Computing, Design II: Mobile Music (MUSIC 256B) | https://explorecourses.stanford.edu/search?q=CS 476B | Aesthetic, design, and implementation of mobile music, centered around the modern super smartphones such as the iPhone). Similarities and intrinsic differences between mobile and traditional computing and design for music. Topics include mobile software design, social and cloud computing, mobile interface design, and programming phones, in the service of music. Prerequisite: MUSIC 256A.
CS 499P | Advanced Reading and Research | https://explorecourses.stanford.edu/search?q=CS 499P | Graded satisfactory/no credit. Advanced reading and research for CS graduate students. Register using the section number associated with the instructor. Prerequisite: consent of instructor.
CS 545 | Information and Data Analytics Seminar | https://explorecourses.stanford.edu/search?q=CS 545 | Seminar features leading industrial and academic experts on big data analytics, information management, data mining, machine learning, and large-scale data processing.
CS 546 | Seminar on Liberation Technologies (POLISCI 337S) | https://explorecourses.stanford.edu/search?q=CS 546 | This one-unit seminar will present speakers relevant in a variety ofnways to how various forms of information technology are being used tondefend human rights, improve governance, deepen democracy, empower thenpoor, promote economic development, protect the environment, enhancenpublic health, and pursue a variety of other social goods.
CS 571 | Surgical Robotics Seminar (ME 571) | https://explorecourses.stanford.edu/search?q=CS 571 | Surgical robots developed and implemented clinically on varying scales. Seminar goal is to expose students from engineering, medicine, and business to guest lecturers from academia and industry.engineering and clinical aspects connected to design and use of surgical robots, varying in degree of complexity and procedural role. May be repeated for credit.
CS 801 | TGR Project | https://explorecourses.stanford.edu/search?q=CS 801 | 
CS 802 | TGR Dissertation | https://explorecourses.stanford.edu/search?q=CS 802 | 
