CS101 | Introduction to Computing Principles | http://cs101.Stanford.EDU | instructors:Parlante features:Video lectures
CS103 | Mathematical Foundations of Computing | http://cs103.Stanford.EDU | instructors:Schwarz features:Video lectures description:Mathematical foundations required for computer science, including propositional predicate logic, induction, sets, functions, and relations. Formal language theory, including regular expressions, grammars, finite automata, Turing machines, and NP-completeness. Mathematical rigor, proof techniques, and applications. May not be taken by students who have completed 103A,B or 103X. Prerequisite: 106A or equivalent.
CS105 | Introduction to Computers | http://cs105.Stanford.EDU | instructors:Young description:For non-technical majors. What computers are and how they work. Practical experience in programming. Construction of computer programs and basic design techniques. A survey of Internet technology and the basics of computer hardware. Students in technical fields and students looking to acquire programming skills should take 106A or 106X. Students with prior computer science experience at the level of 106 or above require consent of instructor. Prerequisite: minimal math skills.
CS106A | Programming Methodology | http://cs106A.Stanford.EDU | instructors:Sahami features:Video lectures
CS106A-2 | Programming Methodology | http://cs106A-2.Stanford.EDU | instructors:Schwarz features:Video lectures
CS106B | Programming Abstractions | http://cs106B.Stanford.EDU | instructors:Stepp features:Video lectures
CS106L | Standard C++ Programming Laboratory | http://cs106L.Stanford.EDU | instructors:Lee/Miller description:Supplemental lab to 106B and 106X. Additional features of standard C++ programming practice. Possible topics include advanced C++ language features, standard libraries, STL containers and algorithms, object memory management, operator overloading, and inheritance. Prerequisite: consent of instructor. Corequisite: 106B or 106X.
CS106X | Programming Abstractions (Accelerated) | http://cs106X.Stanford.EDU | instructors:Lee features:Video lectures description:Intensive version of 106B for students with a strong programming background interested in a rigorous treatment of the topics at an accelerated pace. Additional advanced material and more challenging projects. Prerequisite: excellence in 106A or equivalent, or consent of instructor.
CS107 | Computer Organization and Systems | http://cs107.Stanford.EDU | instructors:Zelenski
CS107E | Computer Systems from the Ground Up | http://cs107E.Stanford.EDU | instructors:Hanrahan/Levis description:Introduction to the fundamental concepts of computer systems through bare metal programming on the Raspberry Pi. Explores how five concepts come together in computer systems: hardware, architecture, assembly code, the C language, and software development tools. Students do all programming with a Raspberry Pi kit and several add-ons (LEDs, buttons). Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, compilation, memory organization and management, debugging, hardware, and I/O. Prerequisite: 106B or X, and consent of instructor.
CS108 | Object-Oriented Systems Design | http://cs108.Stanford.EDU | instructors:Young
CS109 | Intro to Probability for Computer Scientists | http://cs109.Stanford.EDU | instructors:Lee description:Topics include: counting and combinatorics, random variables, conditional probability, independence, distributions, expectation, point estimation, and limit theorems. Applications of probability in computer science including machine learning and the use of probability in the analysis of algorithms. Prerequisites: 103, 106B or X, multivariate calculus at the level of MATH 51 or CME 100 or equivalent.
CS109L | Statistical Computing with R Laboratory | http://cs109L.Stanford.EDU | instructors:Lee/Shin
CS110 | Principles of Computer Systems | http://cs110.Stanford.EDU | instructors:Cain
CS122 | AI: Philosophy, Ethics and Impact | http://cs122.Stanford.EDU | instructors:Kaplan
CS124 | From Languages to Information | http://cs124.Stanford.EDU | instructors:Jurafsky
CS131 | Computer Vision: Foundations and Applications | http://cs131.Stanford.EDU | instructors:Li
CS140 | Operating Systems and Systems Programming | http://cs140.Stanford.EDU | instructors:Mazieres/Belay
CS142 | Web Applications | http://cs142.Stanford.EDU | instructors:Ousterhout description:Concepts and techniques used in constructing interactive web applications. Browser-side web facilities such as HTML, cascading stylesheets, javascript, and the document object model. Server-side technologies such as sessions, templates, relational databases, and object-relational mapping. Issues in web security and application scalability. New models of web application deployment. Prerequisites: CS 107 and CS 108.
CS143 | Compilers | http://cs143.Stanford.EDU | instructors:Dill features:Video lectures description:Principles and practices for design and implementation of compilers and interpreters. Topics: lexical analysis; parsing theory; symbol tables; type systems; scope; semantic analysis; intermediate representations; runtime environments; code generation; and basic program analysis and optimization. Students construct a compiler for a simple object-oriented language during course programming projects. Prerequisites: 103 or 103B, and 107.
CS144 | Introduction to Computer Networking | http://cs144.Stanford.EDU | instructors:Levis/McKeown
CS145 | Introduction to Databases | http://cs145.Stanford.EDU | instructors:Re features:Video lectures
CS147 | Introduction to Human-Computer Interaction Design | http://cs147.Stanford.EDU | instructors:Landay features:Video lectures
CS148 | Introduction to Computer Graphics and Imaging | http://cs148.Stanford.EDU | instructors:Fedkiw
CS149 | Parallel Computing | http://cs149.Stanford.EDU | instructors:Aiken/Olukotun description:This course is an introduction to parallelism and parallel programming.  Most new computer architectures are parallel; programming these machines requires knowledge of the basic issues of and techniques for writing parallel software. Topics:  varieties of parallelism in current hardware (e.g., fast networks, multicore, accelerators such as GPUs, vector instruction sets), importance of locality, implicit vs. explicit parallelism, shared vs. non-shared memory, synchronization mechanisms (locking, atomicity, transactions, barriers), and parallel programming models (threads, data parallel/streaming, futures, SPMD, message passing, SIMT, transactions, and nested parallelism).  Significant parallel programming assignments will be given as homework.  The course is open to students who have completed the introductory CS course sequence through 110 and have taken CS 143.
CS154 | Introduction to Automata and Complexity Theory | http://cs154.Stanford.EDU | instructors:Williams features:Video lectures description:This course provides a mathematical introduction to the following questions: What is computation? Given a computational model, what problems can we hope to solve in principle with this model? Besides those solvable in principle, what problems can we hope to efficiently solve? In many cases we can give completely rigorous answers; in other cases, these questions have become major open problems in computer science and mathematics. By the end of this course, students will be able to classify computational problems in terms of their computational complexity (Is the problem regular? Not regular? Decidable? Recognizable? Neither? Solvable in P? NP-complete? PSPACE-complete?, etc.). Students will gain a deeper appreciation for some of the fundamental issues in computing that are independent of trends of technology, such as the Church-Turing Thesis and the P versus NP problem. Prerequisites: CS 103 or 103B.
CS155 | Computer and Network Security | http://cs155.Stanford.EDU | instructors:Boneh/Mitchell
CS157 | Logic and Automated Reasoning | http://cs157.Stanford.EDU | instructors:Genesereth features:Video lectures
CS161 | Design and Analysis of Algorithms | http://cs161.Stanford.EDU | instructors:Plotkin features:Video lectures
CS168 | The Modern Algorithmic Toolbox | http://cs168.Stanford.EDU | instructors:Roughgarden/Va
CS170 | Stanford Laptop Orchestra: Composition, Coding, Pe | http://cs170.Stanford.EDU | instructors:Wang
CS181 | Computers, Ethics and Public Policy | http://cs181.Stanford.EDU | instructors:Cooper
CS181W | Computers, Ethics and Public Policy (WIM) | http://cs181W.Stanford.EDU | instructors:Cooper
CS183B | How to Start a Startup | http://cs183B.Stanford.EDU | instructors:Altman features:Video lectures
CS190 | Software Design Studio | http://cs190.Stanford.EDU | instructors:Ousterhout
CS191 | Senior Project | http://cs191.Stanford.EDU | instructors:(none listed)
CS191W | Writing Intensive Senior Project | http://cs191W.Stanford.EDU | instructors:(none listed)
CS192 | Programming Service Project | http://cs192.Stanford.EDU | instructors:(none listed)
CS193A | Android Programming | http://cs193A.Stanford.EDU | instructors:Stepp
CS193C | Client-Side Internet Technologies | http://cs193C.Stanford.EDU | instructors:Young
CS193P | iPhone and iPad Application Programming | http://cs193P.Stanford.EDU | instructors:Hegarty features:Video lectures
CS194 | Software Project | http://cs194.Stanford.EDU | instructors:Stepp
CS194H | User Interface Design Project | http://cs194H.Stanford.EDU | instructors:Landay description:Advanced methods for designing, prototyping, and evaluating user interfaces to computing applications. Novel interface technology, advanced interface design methods, and prototyping tools. Substantial, quarter-long course project that will be presented in a public presentation. Prerequisites: CS 147, or permission of instructor.
CS194W | Software Project (WIM) | http://cs194W.Stanford.EDU | instructors:Stepp
CS196 | Computer Consulting | http://cs196.Stanford.EDU | instructors:Smith
CS198 | Teaching Computer Science | http://cs198.Stanford.EDU | instructors:Sahami/Valderr
CS199 | Independent Work | http://cs199.Stanford.EDU | instructors:(none listed)
CS199P | Independent Work | http://cs199P.Stanford.EDU | instructors:(none listed)
CS1C | Introduction to Computing at Stanford | http://cs1C.Stanford.EDU | instructors:Smith
CS1U | Practical Unix | http://cs1U.Stanford.EDU | instructors:Zelenski/Faulk features:Video lectures description:A practical introduction to using the Unix operating system with a focus on Linux command line skills. Class will consist of video tutorials and weekly hands-on lab sections. The time listed on AXESS is for the first week's logistical meeting only. Topics include: grep and regular expressions, ZSH, Vim and Emacs, basic and advanced GDB features, permissions, working with the file system, revision control, Unix utilities, environment customization, and using Python for shell scripts. Topics may be added, given sufficient interest. Course website: http://cs1u.stanford.edu
CS202 | Law for Computer Science Professionals | http://cs202.Stanford.EDU | instructors:Hansen
CS204 | Legal Informatics | http://cs204.Stanford.EDU | instructors:Genesereth/Vog description:Legal informatics based on representation of regulations in computable form. Encoding regulations facilitate creation of legal information systems with significant practical value. Convergence of technological trends, growth of the Internet, advent of semantic web technology, and progress in computational logic make computational law prospects better. Topics: current state of computational law, prospects and problems, philosophical and legal implications. This course is *Cross* listed with LAW 729. Prerequisite: basic concepts of programming.
CS205A | Mathematical Methods for Robotics, Vision & Graph | http://cs205A.Stanford.EDU | instructors:Solomon description:Continuous mathematics background necessary for research in robotics, vision, and graphics. Possible topics: linear algebra; the conjugate gradient method; ordinary and partial differential equations; vector and tensor calculus. Prerequisites: 106B or X; MATH 51; or equivalents.
CS207 | The Economics of Software | http://cs207.Stanford.EDU | instructors:Wiederhold/Sik description:How businesses move software products into the marketplace and how the associated intellectual capital is exploited. The value of creators and managers. Concepts that are outside of the common knowledge of computer scientists such as business terms and spreadsheet computations to quantitatively compare alternatives. Goal is to contribute to informed decision making in high-tech product design, acquisition, production, marketing, selection of business structures, outsourcing, and impact of taxation policies. No specific background required. External experts complement class presentations.
CS210A | Software Project Experience with Corporate Partner | http://cs210A.Stanford.EDU | instructors:Borenstein
CS210B | Software Project Experience with Corporate Partner | http://cs210B.Stanford.EDU | instructors:Borenstein description:Continuation of CS210A. Focus is on real-world software development. Corporate partners seed projects with loosely defined challenges from their R&D labs; students innovate to build their own compelling software solutions. Student teams are treated as start-up companies with a budget and a technical advisory board comprised of the instructional staff and corporate liaisons. Teams will typically travel to the corporate headquarters of their collaborating partner, meaning some teams will travel internationally. Open loft classroom format such as found in Silicon Valley software companies. Exposure to: current practices in software engineering; techniques for stimulating innovation; significant development experience with creative freedoms; working in groups; real world software engineering challenges; public presentation of technical work; creating written descriptions of technical work. Prerequisites: CS 210A
CS210L | Introducing Software Through Video Stories | http://cs210L.Stanford.EDU | instructors:Borenstein/Gre
CS211 | Content Creation in Virtual Reality | http://cs211.Stanford.EDU | instructors:Borenstein
CS221 | Artificial Intelligence: Principles & Techniques | http://cs221.Stanford.EDU | instructors:Liang
CS223A | Introduction to Robotics | http://cs223A.Stanford.EDU | instructors:Khatib features:Video lectures description:Robotics foundations in modeling, design, planning, and control. Class covers relevant results from geometry, kinematics, statics, dynamics, motion planning, and control, providing the basic methodologies and tools in robotics research and applications. Concepts and models are illustrated through physical robot platforms, interactive robot simulations, and video segments relevant to historical research developments or to emerging application areas in the field. Recommended: matrix algebra.
CS224N | Natural Language Processing | http://cs224N.Stanford.EDU | instructors:Manning features:Video lectures description:Methods for processing human language information and the underlying computational properties of natural languages. Syntactic and semantic processing from linguistic and algorithmic perspectives. Focus is on modern quantitative techniques in NLP: using large corpora, statistical models for acquisition, translation, and interpretation; and representative systems. Prerequisites: CS124 or CS121/221.
CS224U | Natural Language Understanding | http://cs224U.Stanford.EDU | instructors:MacCartney/Pot
CS224W | Social and Information Network Analysis | http://cs224W.Stanford.EDU | instructors:Leskovec description:(Formerly 322) How do diseases spread? Who are the influencers? How can we predict friends and enemies in a social network? How information flows and mutates as it is passed through networks? Behind each of these questions there is an intricate wiring diagram, a network, that defines the interactions between the components. And we will never understand these questions unless we understand the networks behind them. The course will cover recent research on the structure and analysis of such large social and information networks and on models and algorithms that abstract their basic properties. Class will explore how to practically analyze large-scale network data and how to reason about it through models for network structure and evolution. Topics include methods for link analysis and network community detection, diffusion and information propagation on the web, virus outbreak detection in networks, and connections with work in the social sciences and economics.
CS225A | Experimental Robotics | http://cs225A.Stanford.EDU | instructors:Khatib
CS227B | General Game Playing | http://cs227B.Stanford.EDU | instructors:Genesereth features:Video lectures
CS228 | Probabilistic Graphical Models: Principles and Tec | http://cs228.Stanford.EDU | instructors:Ermon features:Video lectures
CS229 | Machine Learning | http://cs229.Stanford.EDU | instructors:Ng features:Video lectures
CS229T | Statistical Learning Theory | http://cs229T.Stanford.EDU | instructors:Liang
CS231A | Computer Vision:From 3D Recontruct to Recognition | http://cs231A.Stanford.EDU | instructors:Savarese
CS231B | The Cutting Edge of Computer Vision | http://cs231B.Stanford.EDU | instructors:Li description:(Formerly 223C) More than one-third of the brain is engaged in visual processing, the most sophisticated human sensory system. Yet visual recognition technology has fundamentally influenced our lives on the same scale and scope as text-based technology has, thanks to Google, Twitter, Facebook, etc. This course is designed for those students who are interested in cutting edge computer vision research, and/or are aspiring to be an entrepreneur using vision technology. Course will guide students through the design and implementation of three core vision technologies: segmentation, detection and classification on three highly practical, real-world problems. Course will focus on teaching the fundamental theory, detailed algorithms, practical engineering insights, and guide them to develop state-of-the-art systems evaluated based on the most modern and standard benchmark datasets. Prerequisites: CS2223B or equivalent and a good machine learning background (i.e. CS221, CS228, CS229). Fluency in Matlab and C/C++.
CS231M | Mobile Computer Vision | http://cs231M.Stanford.EDU | instructors:Savarese
CS231N | Convolutional Neural Networks for Visual Recog | http://cs231N.Stanford.EDU | instructors:Li/Karpathy description:Computer Vision has become ubiquitous in our society, with applications innsearch, image understanding, apps, mapping, medicine, drones, andnself-driving cars. Core to many of these applications are the tasks of image classification, localization and detection. This course is a deep dive into details of neural network architectures with a focus on learning end-to-end models for these tasks, particularly image classification. During the 10-week course, students will learn to implement, train and debug their own neural networks and gain a detailed understanding of cutting-edge research in computer vision. The final assignment will involve training a multi-million parameter convolutional neural network and applying it on the largest image classification dataset (ImageNet). We will focus on teaching how to set up the problem of image recognition, the learning algorithms (e.g. backpropagation), practical engineering tricks for training and fine-tuning the networks and guide the students through hands-on assignments and a final course project. Much of the background and materials of this course will be drawn from the ImageNet Challenge: http://image-net.org/challenges/LSVRC/2014/index. Prerequisites: Proficiency in Python; familiarity with C/C++; CS 131 and CS 229 or equivalents; Math 21 or equivalent, linear algebra.
CS232 | Digital Image Processing | http://cs232.Stanford.EDU | instructors:Girod/Wetzstei
CS238 | Decision Making under Uncertainty | http://cs238.Stanford.EDU | instructors:Kochenderfer description:This course is designed to increase awareness and appreciation for why uncertainty matters, particularly for aerospace applications. Introduces decision making under uncertainty from a computational perspective and provides an overview of the necessary tools for building autonomous and decision-support systems. Following an introduction to probabilistic models and decision theory, the course will cover computational methods for solving decision problems with stochastic dynamics, model uncertainty, and imperfect state information. Topics include: Bayesian networks, influence diagrams, dynamic programming, reinforcement learning, and partially observable Markov decision processes. Applications cover: air traffic control, aviation surveillance systems, autonomous vehicles, and robotic planetary exploration. Prerequisites: basic probability and fluency in a high-level programming language.
CS239 | Advanced Topics in Sequential Decision Making | http://cs239.Stanford.EDU | instructors:Kochenderfer
CS240 | Advanced Topics in Operating Systems | http://cs240.Stanford.EDU | instructors:Engler description:Recent research. Classic and new papers. Topics: virtual memory management, synchronization and communication, file systems, protection and security, operating system extension techniques, fault tolerance, and the history and experience of systems programming. Prerequisite: 140 or equivalent.
CS242 | Programming Languages | http://cs242.Stanford.EDU | instructors:Stefan/Yang description:Central concepts in modern programming languages, impact on software development, language design trade-offs, and implementation considerations. Functional, imperative, and object-oriented paradigms. Formal semantic methods and program analysis. Modern type systems, higher order functions and closures, exceptions and continuations. Modularity, object-oriented languages, and concurrency. Runtime support for language features, interoperability, and security issues. Prerequisite: 107, or experience with Lisp, C, and an object-oriented language.
CS243 | Program Analysis and Optimizations | http://cs243.Stanford.EDU | instructors:Lam
CS244 | Advanced Topics in Networking | http://cs244.Stanford.EDU | instructors:McKeown
CS244B | Distributed Systems | http://cs244B.Stanford.EDU | instructors:Mazieres/Engle
CS245 | Database System Principles | http://cs245.Stanford.EDU | instructors:Garcia-Molina
CS246 | Mining Massive Data Sets | http://cs246.Stanford.EDU | instructors:Leskovec features:Video lectures
CS246H | Mining Massive Datasets Hadoop Lab | http://cs246H.Stanford.EDU | instructors:Leskovec/Templ
CS247 | Human-Computer Interaction Design Studio | http://cs247.Stanford.EDU | instructors:Bernstein description:Project-based focus on interaction design process, especially early-stage design and rapid prototyping. Methods used in interaction design including needs analysis, user observation, sketching, concept generation, scenario building, and evaluation. Prerequisites: 147 or equivalent background in design thinking; 106B or equivalent background in programming.
CS248 | Interactive Computer Graphics | http://cs248.Stanford.EDU | instructors:Fedkiw
CS249A | Object-Oriented Prog: A Modeling & Simul Perspect | http://cs249A.Stanford.EDU | instructors:Linton description:Topics: large-scale software development approaches for complex applications, class libraries and frameworks; encapsulation, use of inheritance and dynamic dispatch, design of interfaces and interface/implementation separation, exception handling, smart pointers and reference management, minimalizing dependencies and value-oriented programming. Inheritance: when and why multiple inheritance naming, directories, manager, and disciplined use of design patterns including functors, event notification and iterators. Prerequisites: C, C++, and programming methodology as developed in 106B or X, and 107 (107 may be taken concurrently). Recommended: 193D.
CS254 | Computational Complexity | http://cs254.Stanford.EDU | instructors:Williams
CS255 | Introduction to Cryptography | http://cs255.Stanford.EDU | instructors:Boneh features:Video lectures
CS259D | Data Mining for Cybersecurity | http://cs259D.Stanford.EDU | instructors:Bahmani description:The massive increase in the rate of novel cyber attacks has made data-mining-based techniques a critical component in detecting security threats. The course covers various applications of data mining in computer and network security. Topics include: Overview of the state of information security; malware detection; network and host intrusion detection; web, email, and social network security; authentication and authorization anomaly detection; alert correlation; and potential issues such as privacy issues and adversarial machine learning. Prerequisites: Data mining / machine learning at the level of CS 246 or CS 229; familiarity with computer systems and networks at least at the level of CS 110; CS 140 and CS 144 strongly recommended; CS 155 recommended but not required.
CS262 | Computational Genomics | http://cs262.Stanford.EDU | instructors:Batzoglou description:Applications of computer science to genomics, and concepts in genomics from a computer science point of view. Topics: dynamic programming, sequence alignments, hidden Markov models, Gibbs sampling, and probabilistic context-free grammars. Applications of these tools to sequence analysis: comparative genomics, DNA sequencing and assembly, genomic annotation of repeats, genes, and regulatory sequences, microarrays and gene expression, phylogeny and molecular evolution, and RNA structure. Prerequisites: 161 or familiarity with basic algorithmic concepts. Recommended: basic knowledge of genetics.
CS263 | Algorithms for Modern Data Models | http://cs263.Stanford.EDU | instructors:Goel
CS264 | Beyond Worst Case Analysis | http://cs264.Stanford.EDU | instructors:Roughgarden features:Video lectures
CS265 | Randomized Algorithms and Probabilistic Analysis | http://cs265.Stanford.EDU | instructors:Valiant description:Randomness pervades the natural processes around us, from the formation of networks, to genetic recombination, to quantum physics. Randomness is also a powerful tool that can be leveraged to create algorithms and data structures which, in many cases, are more efficient and simpler than their deterministic counterparts. This course covers the key tools of probabilistic analysis, and application of these tools to understand the behaviors of random processes and algorithms. Emphasis is on theoretical foundations, though we will apply this theory broadly, discussing applications in machine learning and data analysis, networking, and systems. Topics include tail bounds, the probabilistic method, Markov chains, and martingales, with applications to analyzing random graphs, metric embeddings, random walks, and a host of powerful and elegant randomized algorithms. Prerequisites: CS 161 and STAT 116, or equivalents and instructor consent.
CS266 | Parameterized Algorithms and Complexity | http://cs266.Stanford.EDU | instructors:Williams description:An introduction to the area of parameterized algorithms and complexity, which explores multidimensional methods for measuring the difficulty and feasibility of solving computational problems. Topics include: fixed-parameter tractability (FPT) and its characterizations, FPT algorithms for hard problems, the W-hierarchy (W[1], W[2], W[P], and complete problems for these classes), and the relationships between parameterized questions and classical theory questions. Prerequisites: CS 154 and 161 or the equivalent mathematical maturity.
CS267 | Graph Algorithms | http://cs267.Stanford.EDU | instructors:Williams
CS268 | Geometric Algorithms | http://cs268.Stanford.EDU | instructors:Guibas description:Techniques for design and analysis of efficient geometric algorithms for objects in 2-, 3-, and higher dimensions. Topics: convexity, triangulations and simplicial complexes, sweeping, partitioning, and point location. Voronoi/Delaunay diagrams and their properties. Arrangements of curves and surfaces. Intersection and visibility problems. Geometric searching and optimization. Random sampling methods. Impact of numerical issues in geometric computation. Example applications to robotic motion planning, visibility preprocessing and rendering in graphics, model-based recognition in computer vision, and structural molecular biology. Prerequisite: discrete algorithms at the level of 161. Recommended: 164.
CS27 | Literature and Social Online Learning | http://cs27.Stanford.EDU | instructors:Dierkes-Thrun/
CS270 | Modeling Biomedical Systems | http://cs270.Stanford.EDU | instructors:Musen
CS272 | Intro Biomedical Informatics Research Methodology | http://cs272.Stanford.EDU | instructors:Altman description:Hands-on software building. Student teams conceive, design, specify, implement, evaluate, and report on a software project in the domain of biomedicine. Creating written proposals, peer review, providing status reports, and preparing final reports. Guest lectures from professional biomedical informatics systems builders on issues related to the process of project management. Software engineering basics. Because the team projects start in the first week of class, attendance that week is strongly recommended. Prerequisites: BIOMEDIN 210 or 211 or 214 or 217 or consent of instructor.
CS273A | A Computational Tour of the Human Genome | http://cs273A.Stanford.EDU | instructors:Batzoglou/Beje
CS274 | Reps and Algor for Computational Molecular Bio | http://cs274.Stanford.EDU | instructors:Altman
CS275 | Translational Bioinformatics | http://cs275.Stanford.EDU | instructors:Butte description:Analytic, storage, and interpretive methods to optimize the transformation of genetic, genomic, and biological data into diagnostics and therapeutics for medicine. Topics: access and utility of publicly available data sources; types of genome-scale measurements in molecular biology and genomic medicine; analysis of microarray data; analysis of polymorphisms, proteomics, and protein interactions; linking genome-scale data to clinical data and phenotypes; and new questions in biomedicine using bioinformatics. Case studies. Prerequisites: programming ability at the level of CS 106A and familiarity with statistics and biology.
CS275A | Symbolic Musical Information | http://cs275A.Stanford.EDU | instructors:Selfridge-Fiel description:Focus on symbolic data for music applications including advanced notation systems, optical music recognition, musical data conversion, and internal structure of MIDI files.
CS275B | Music Query, Analysis and Style Simulation | http://cs275B.Stanford.EDU | instructors:Selfridge-Fiel
CS276 | Information Retrieval and Web Search | http://cs276.Stanford.EDU | instructors:Manning/Nayak
CS279 | Comp Biology: Struct & Org of Biomolecules & Cells | http://cs279.Stanford.EDU | instructors:Dror
CS294S | Research Project in Software Systems and Security | http://cs294S.Stanford.EDU | instructors:Lam
CS294W | Writing Intensive Research Project in CS | http://cs294W.Stanford.EDU | instructors:Lam
CS298 | Seminar on Teaching Introductory Computer Science | http://cs298.Stanford.EDU | instructors:Cooper/Grover
CS2C | Introduction to Media Production | http://cs2C.Stanford.EDU | instructors:Scott
CS300 | Departmental Lecture Series | http://cs300.Stanford.EDU | instructors:Dill
CS309A | Cloud Computing | http://cs309A.Stanford.EDU | instructors:Chou
CS316 | Advanced Multi-core Systems | http://cs316.Stanford.EDU | instructors:Kozyrakis
CS327A | Advanced Robotic Manipulation | http://cs327A.Stanford.EDU | instructors:Khatib description:Advanced control methodologies and novel design techniques for complex human-like robotic and bio mechanical systems. Class covers the fundamentals in operational space dynamics and control, elastic planning, human motion synthesis. Topics include redundancy, inertial properties, haptics, simulation, robot cooperation, mobile manipulation, human-friendly robot design, humanoids and whole-body control. Additional topcs in emerging areas are presented by groups of students at the end-of-quarter mini-symposium. Prerequisites: 223A or equivalent.
CS334A | Convex Optimization | http://cs334A.Stanford.EDU | instructors:Boyd features:Video lectures description:Convex sets, functions, and optimization problems. The basics of convex analysis and theory of convex programming: optimality conditions, duality theory, theorems of alternative, and applications. Least-squares, linear and quadratic programs, semidefinite programming, and geometric programming. Numerical algorithms for smooth and equality constrained problems; interior-point methods for inequality constrained problems. Applications to signal processing, communications, control, analog and digital circuit design, computational geometry, statistics, machine learning, and mechanical engineering. Prerequisite: linear algebra such as EE263, basic probability.
CS341 | Project in Mining Massive Data Sets | http://cs341.Stanford.EDU | instructors:Leskovec/Ullma description:Team project in data-mining of very large-scale data, including the problem statement and implementation and evaluation of a solution; some lectures on relevant materials will be given: Hadoop, Hive, Amazon EC2; other topics of possible relevance to some projects: computational advertising and the adwords problem; graph partitioning and community detection; extracting relations from the Web; stream data processing.
CS344G | (Your) Great Ideas for Networked Applications | http://cs344G.Stanford.EDU | instructors:Winstein
CS346 | Database System Implementation | http://cs346.Stanford.EDU | instructors:Re description:A major database system implementation project realizes the principles and techniques covered in earlier courses. Students independently build a complete database management system, from file structures through query processing, with a personally designed feature or extension. Lectures on project details and advanced techniques in database system implementation, focusing on query processing and optimization. Guest speakers from industry on commercial DBMS implementation techniques. Prerequisites: 145, 245, programming experience in C++.
CS347 | Parallel and Distributed Data Management | http://cs347.Stanford.EDU | instructors:Cooper
CS348B | Computer Graphics: Image Synthesis Techniques | http://cs348B.Stanford.EDU | instructors:Hanrahan
CS369E | Communication Complexity (for Algorithm Designers) | http://cs369E.Stanford.EDU | instructors:Roughgarden
CS371 | Computational Biology in Four Dimensions | http://cs371.Stanford.EDU | instructors:Dror
CS373 | Statistical & Machine Learning Meth for Genomics | http://cs373.Stanford.EDU | instructors:Kundaje/Pritch
CS374 | Algorithms in Biology | http://cs374.Stanford.EDU | instructors:Batzoglou description:Algorithms and computational models applied to molecular biology and genetics. Topics vary annually. Possible topics include biological sequence comparison, annotation of genes and other functional elements, molecular evolution, genome rearrangements, microarrays and gene regulation, protein folding and classification, molecular docking, RNA secondary structure, DNA computing, and self-assembly. May be repeated for credit. Prerequisites: 161, 262 or 274, or BIOCHEM 218, or equivalents.
CS376 | Research Topics in Human-Computer Interaction | http://cs376.Stanford.EDU | instructors:Bernstein description:Prepares students to conduct original HCI research by reading and discussing seminal and cutting-edge research papers. Main topics are ubiquitous computing, social computing, and design and creation; breadth topics include HCI methods, programming, visualization, and user modeling. Student pairs perform a quarter-long research project. For undergraduates, CS147 is a prerequisite.
CS379C | Computational Models of the Neocortex | http://cs379C.Stanford.EDU | instructors:Dean
CS390A | Curricular Practical Training | http://cs390A.Stanford.EDU | instructors:(none listed) description:Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in internship work and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. 390 A, B, and C may each be taken once.
CS390B | Curricular Practical Training | http://cs390B.Stanford.EDU | instructors:(none listed)
CS390C | Curricular Practical Training | http://cs390C.Stanford.EDU | instructors:(none listed) description:Educational opportunities in high technology research and development labs in the computing industry. Qualified computer science students engage in internship work and integrate that work into their academic program. Students register during the quarter they are employed and complete a research report outlining their work activity, problems investigated, results, and follow-on projects they expect to perform. 390A,B,C may each be taken once.
CS390P | Part-time Curricular Practical Training | http://cs390P.Stanford.EDU | instructors:(none listed)
CS393 | Computer Laboratory | http://cs393.Stanford.EDU | instructors:(none listed) description:For CS graduate students. A substantial computer program is designed and implemented; written report required. Recommended as a preparation for dissertation research. Register using the section number associated with the instructor. Prerequisite: consent of instructor.
CS395 | Independent Database Project | http://cs395.Stanford.EDU | instructors:(none listed)
CS399 | Independent Project | http://cs399.Stanford.EDU | instructors:(none listed) description:Letter grade only.
CS399P | Independent Project | http://cs399P.Stanford.EDU | instructors:(none listed)
CS42 | Callback Me Maybe: Contemporary Javascript | http://cs42.Stanford.EDU | instructors:Schwarz/Nair
CS427 | Hero's Journey:AI & Game Theory 3D Real-Time Story | http://cs427.Stanford.EDU | instructors:Ford
CS448I | Computational Imaging and Display | http://cs448I.Stanford.EDU | instructors:Wetzstein
CS448X | Topics in Computer Graphics | http://cs448X.Stanford.EDU | instructors:Hanrahan
CS45N | Computers and Photography: From Capture to Sharing | http://cs45N.Stanford.EDU | instructors:Garcia-Molina description:Preference to freshmen with experience in photography and use of computers. Elements of photography, such as lighting, focus, depth of field, aperture, and composition. How a photographer makes photos available for computer viewing, reliably stores them, organizes them, tags them, searches them, and distributes them online. No programming experience required. Digital SLRs and editing software will be provided to those students who do not wish to use their own.
CS476A | Music, Computing and Design I | http://cs476A.Stanford.EDU | instructors:Wang description:Software design and implementation for computer audio. Strategies, best practices, and tradeoffs in building audio software systems of various sizes (S, M, L, XL), with a focus on interactive (real-time) systems. Lectures examine high-level designs as well as dissect code in a hands-on manner. Course work includes small programming assignments and a final software project. This course is the prerequisite for MUSIC 256B. Prerequisite: experience in C/C++ and/or Java.
CS476B | Mobile Music | http://cs476B.Stanford.EDU | instructors:Wang description:Aesthetic, design, and implementation of mobile music, centered around the modern super smartphones such as the iPhone). Similarities and intrinsic differences between mobile and traditional computing and design for music. Topics include mobile software design, social and cloud computing, mobile interface design, and programming phones, in the service of music. Prerequisite: MUSIC 256A.
CS499 | Advanced Reading and Research | http://cs499.Stanford.EDU | instructors:(none listed)
CS499P | Advanced Reading and Research | http://cs499P.Stanford.EDU | instructors:(none listed) description:Graded satisfactory/no credit. Advanced reading and research for CS graduate students. Register using the section number associated with the instructor. Prerequisite: consent of instructor.
CS545 | Database and Information Management Seminar | http://cs545.Stanford.EDU | instructors:Leskovec features:Video lectures
CS546 | Seminar on Liberation Technologies | http://cs546.Stanford.EDU | instructors:Cohen
CS547 | Human-Computer Interaction Seminar | http://cs547.Stanford.EDU | instructors:Bernstein features:Video lectures
CS54N | Great Ideas in Computer Science | http://cs54N.Stanford.EDU | instructors:Roberts description:Stanford Introductory Seminar. Preference to freshmen. Covers the intellectual tradition of computer science emphasizing ideas that reflect the most important milestones in the history of the discipline.  No prior experience with programming is assumed.  Topics include programming and problem solving; implementing computation in hardware; algorithmic efficiency; the theoretical limits of computation; cryptography and security; and the philosophy behind artificial intelligence.
CS55N | Computer and Information Security | http://cs55N.Stanford.EDU | instructors:Boneh features:Video lectures
CS571 | Surgical Robotics Seminar | http://cs571.Stanford.EDU | instructors:Barbagli/Okamu description:Surgical robots developed and implemented clinically on varying scales. Seminar goal is to expose students from engineering, medicine, and business to guest lecturers from academia and industry.engineering and clinical aspects connected to design and use of surgical robots, varying in degree of complexity and procedural role. May be repeated for credit.
CS76N | Elections and Technology | http://cs76N.Stanford.EDU | instructors:Dill
CS801 | TGR Project | http://cs801.Stanford.EDU | instructors:(none listed)
CS802 | TGR Dissertation | http://cs802.Stanford.EDU | instructors:(none listed)
CS81N | Hackers and Heroes | http://cs81N.Stanford.EDU | instructors:Winstein
CS9 | Problem-solving for the CS Technical Interview | http://cs9.Stanford.EDU | instructors:Cain/Lee
CS91SI | Digital Canvas: Intro to Visual Design on the Web | http://cs91SI.Stanford.EDU | instructors:Bernstein description:Introduction to visual design concepts with a focus on modern interfaces like web, mobile and app. Topics include visual design elements and principles such as color theory, layout and composition, typography, and aspects of communication. Students will analyze existing designs, and use various technical tools to implement their own designs. This course consists of a series of in-class activities, design projects, peer critique sessions, and guest speakers. Recommended prerequisites: some web programming experience. Application required.
